//historico
update xeo_historico set numero_colocacion = trim (numero_colocacion);
update xeo_historico set transaccion=trim(transaccion);
update xeo_historico set tipo_doc=trim(tipo_doc);
update xeo_historico set tipo_doc=upper(tipo_doc);

//Plan de pagos
update xeo_plandepagos set numero_credito= trim (numero_credito);

---------------------------------------------------
----m_cli_liquidacion_cuota
---------------------------------------------------

insert into m_cli_liquidacion_cuota (s_tipo_documentoid, s_tipo_movimientoid, s_vigenciavigencia, s_periodoperiodo, estado, creacion, fecha, descripcion, consecutivo)
SELECT distinct 41, 186, '2017', 1, 'Autorizado',  to_date('2017-01-01','yyyy-mm-dd'), xh.fecha_desembolso ,ced_cliente || ' - ' ||(CASE 
WHEN s_tercero.naturalezajuridica='Natural' 
	THEN s_tercero.nombre1||' '||COALESCE(s_tercero.nombre2,' ')||' '||s_tercero.apellido1||' '||COALESCE(s_tercero.apellido2,' ')
WHEN s_tercero.naturalezajuridica='Juridica' 
	THEN s_tercero.razonsocial
END) || ' - ' || ' - Num.Credito:' || xh.numero_colocacion ,(SELECT to_char(cast(coalesce(max(consecutivo),'0') as int)+1,'FM09999999') from m_cli_liquidacion_cuota)
from xeo_historico xh
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)
WHERE xh.fecha_desembolso IS NOT NULL
--AND  XH.NUMERO_COLOCACION IN ('CAR-193','LIB-0002879','LIB-0002892','LIB-0002894','LIB-0002896','LIB-0002900')

order by xh.fecha_desembolso asc 

-------------------------------------------------------
Para modificar los consecutivo
-------------------------------------------------------
update m_cli_liquidacion_cuota mccc1 set consecutivo= (select to_char(count(mccc2.id)+1,'FM09999999') 
from m_cli_liquidacion_cuota mccc2
where mccc2.id<mccc1.id)

---------------------------------------------------
---m_cli_comprobante_credito
---------------------------------------------------

insert into m_cli_comprobante_credito (m_con_centro_contableid, s_tipo_documentoid, s_tipo_movimientoid, s_vigenciavigencia, s_periodoperiodo, estadocomprobantecredito, creacion, fecha, descripcion, 
fecharealdepago,consecutivo,s_terceroid) 
SELECT distinct 
1, 42, 187, '2017', 1, 'Autorizado', to_date('2017-01-01','yyyy-mm-dd'),  xh.fecha_movimiento , 'Nro.Doc: '||xh.ced_cliente ||'-'||
(CASE 
WHEN s_tercero.naturalezajuridica='Natural' 
	THEN s_tercero.nombre1||' '||COALESCE(s_tercero.nombre2,' ')||' '||s_tercero.apellido1||' '||COALESCE(s_tercero.apellido2,' ')
WHEN s_tercero.naturalezajuridica='Juridica' 
	THEN s_tercero.razonsocial
END) || ' - ' ||  ' - Num.Credito:' || xh.numero_colocacion , 
case 
when (xh.numero_colocacion like '%LIB%') then to_date(To_char(date_trunc('month',xh.fecha_movimiento)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') 
else to_date(To_char(date_trunc('month',xh.fecha_movimiento)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd')
END ,
(SELECT to_char(cast(coalesce(max(consecutivo),'0') as int)+1,'FM09999999') from m_cli_comprobante_credito),
s_tercero.ID
from (
	select numero_colocacion,ced_cliente,fecha_movimiento,numero_doc,count(*)
	from xeo_historico
	WHERE FECHA_MOVIMIENTO IS NOT NULL
	group by numero_colocacion,ced_cliente,fecha_movimiento,numero_doc
	) xh
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)

--WHERE XH.numero_colocacion in ('CAR-181')
ORDER BY xh.fecha_movimiento

------------------------------------------------------------------------------------------
Insertar los creditos que no tienen movimiento en historico pero que tienen desembolso.
------------------------------------------------------------------------------------------

insert into m_cli_comprobante_credito (m_con_centro_contableid, s_tipo_documentoid, s_tipo_movimientoid, s_vigenciavigencia, s_periodoperiodo, estadocomprobantecredito, creacion, fecha, descripcion, 
fecharealdepago,consecutivo,s_terceroid) 
SELECT 1, 42, 230, '2017', 1, 'Autorizado', to_date('2017-01-01','yyyy-mm-dd'),  xh.fecha_desembolso , 'Nro.Doc: '||xh.ced_cliente ||'-'||
(CASE 
WHEN s_tercero.naturalezajuridica='Natural' 
	THEN s_tercero.nombre1||' '||COALESCE(s_tercero.nombre2,' ')||' '||s_tercero.apellido1||' '||COALESCE(s_tercero.apellido2,' ')
WHEN s_tercero.naturalezajuridica='Juridica' 
	THEN s_tercero.razonsocial
END) || ' - ' ||  ' - Num.Credito:' || xh.numero_colocacion , 
case 
when (xh.numero_colocacion like '%LIB%') then to_date(To_char(date_trunc('month',xh.fecha_desembolso)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') 
else to_date(To_char(date_trunc('month',xh.fecha_desembolso)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd')
END ,
(SELECT to_char(cast(coalesce(max(consecutivo),'0') as int)+1,'FM09999999') from m_cli_comprobante_credito),
s_tercero.ID
from (
	select numero_colocacion,ced_cliente,fecha_desembolso,numero_doc,count(*)
	from xeo_historico
	WHERE FECHA_MOVIMIENTO IS NULL
	group by numero_colocacion,ced_cliente,fecha_desembolso,numero_doc
	) xh
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)
inner join (
		select numerocredito --si esta consulta se modifica debe modificarse en el insert select que sigue,donde dice:(select sin mov.)
		from m_cli_credito_aprobado
		where numerocredito
		not in (select distinct mcca.numerocredito
		from m_cli_kardex_credito mckc
		inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) )
	)kardex_num on (xh.numero_colocacion=kardex_num.numerocredito)



--------------------------------------------------
Para cambiar los consecutivos
------------------------------------------------------
update m_cli_comprobante_credito mccc1 set consecutivo= (select to_char(count(mccc2.id)+1,'FM09999999') 
from m_cli_comprobante_credito mccc2
where mccc2.id<mccc1.id)

select * from m_cli_comprobante_credito --Verificar consulta de informacion
order by fecharealdepago,id


//****** Montar el s_autoriza

insert into s_autoriza(
  tipoautorizacion,
  m_rec_dependenciaid,
  m_rec_cargoid,
  s_terceroid,  
  m_cli_comprobante_creditoid)

  select 
  'Elaboro' tipoautorizacion ,
  m_rec_dependencia.id  m_rec_dependencia ,
  m_rec_cargo.id m_rec_cargo,
  s_tercero.id s_tercero,  
  m_cli_comprobante_credito.id m_cli_deposito
 
from  m_cli_comprobante_credito

left join m_rec_cargo_tercero on 268 = m_rec_cargo_tercero.s_terceroid
left join s_tercero on s_tercero.id = 268
left join m_rec_dependencia_m_rec_cargo on m_rec_dependencia_m_rec_cargo.id =m_rec_cargo_tercero.m_rec_dependencia_m_rec_cargoid
left join m_rec_dependencia on m_rec_dependencia.id =m_rec_dependencia_m_rec_cargo.m_rec_dependenciaid
left join m_rec_cargo on m_rec_cargo.id = m_rec_dependencia_m_rec_cargo.m_rec_cargoid

---------------------------------------------------
----m_cli_credito_aprobado
---------------------------------------------------

insert into m_cli_credito_aprobado (m_cli_detalle_aprobacionid,m_cli_clasificacion_creditoid,m_cli_etapa_cobroid,numerocredito,fecha,descripcion,consolidardeudas,tipoconsolidaciondeuda,estadocredito,estadoparaliquidacion,formadeextincion,plazoaprobado, costoamortizado,montoaprobado,periodogracia,formadepago,modalidadpago,numeroregistrodelcredito,fecharegistrodelcredito,diadepago,tipoamortizacion,tasainterespactada,tipotasainteres,modoliquidacioninteres,spread,m_cli_clienteid,m_cli_fuente_pagoid,creacion,valorcuota,fechafin,periodicidadintereses)
SELECT 
1,2,2, xh.numero_colocacion,xpp.fecha_desembolso,xh.numero_colocacion,false,'No Aplica','Desembolsado','Normal',
(CASE 
WHEN xh.transaccion='VIGENTE' 
	THEN 'Vigente'
WHEN xh.transaccion='CANCELADO' 
	THEN 'Pagado'
END),xpp.plazo,false,xh.valor_desembolso,0,
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Descuento nómina'
ELSE 'Efectivo' 
END),xpp.modo_pago,xh.numero_colocacion,xpp.fecha_desembolso,cast(MAX(to_char(extract(day from xpp.fecha_vencimiento),'99')) as integer),
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Cuota creciente'
ELSE 'Cuota constante' 
END),xpp.tasa_ea,'Fijo','Vencido',					CAST(xpp.puntos_spread as NUMERIC(20,4) ),
m_cli_cliente.id,2, to_date('2017-01-01','yyyy-mm-dd'),
MAX (CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN valor_cuota
ELSE 0 
END),xpp.fecha_fin_credito,(case
		when cast(pago_interes as int)=30 then 'Mensual'
		when cast(pago_interes as int)=60  then 'Bimestral'
		when cast(pago_interes as int)=90  then 'Trimestral'
		when cast(pago_interes as int)=120  then 'Cuatrimestral'
		when cast(pago_interes as int)=150  then 'Pentamestral'
		when cast(pago_interes as int)=180 then 'Semestral' 
		when cast(pago_interes as int)=210  then 'Septamestral'
		when cast(pago_interes as int)=240  then 'Octamestral'
		when cast(pago_interes as int)=270  then 'Nonamestral'
		when cast(pago_interes as int)=300 then 'Decamestral'
		when cast(pago_interes as int)=360 then 'Anual'
end)
from xeo_historico xh
--inner join xeo_plandepagos xpp on (xpp.numero_credito=xh.numero_colocacion and xpp.cuota=xh.cuota)
inner join xeo_plandepagos xpp on (xpp.numero_credito=xh.numero_colocacion and xh.cuota is null)
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)
inner join m_cli_cliente on (s_tercero.id=m_cli_cliente.s_terceroid)
--where (transaccion like '%VIGENTE%')
group by 

xh.numero_colocacion,xpp.fecha_desembolso,xh.numero_colocacion,(CASE 
WHEN xh.transaccion='VIGENTE' 
	THEN 'Vigente'
WHEN xh.transaccion='CANCELADO' 
	THEN 'Pagado'
END),xpp.plazo,xh.valor_desembolso,
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Descuento nómina'
ELSE 'Efectivo' 
END),xpp.modo_pago,xh.numero_colocacion,xh.fecha_desembolso,
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Cuota creciente'
ELSE 'Cuota constante' 
END),xpp.tasa_ea,xpp.puntos_spread,m_cli_cliente.id,
xpp.fecha_fin_credito,(case
		when cast(pago_interes as int)=30 then 'Mensual'
		when cast(pago_interes as int)=60  then 'Bimestral'
		when cast(pago_interes as int)=90  then 'Trimestral'
		when cast(pago_interes as int)=120  then 'Cuatrimestral'
		when cast(pago_interes as int)=150  then 'Pentamestral'
		when cast(pago_interes as int)=180 then 'Semestral' 
		when cast(pago_interes as int)=210  then 'Septamestral'
		when cast(pago_interes as int)=240  then 'Octamestral'
		when cast(pago_interes as int)=270  then 'Nonamestral'
		when cast(pago_interes as int)=300 then 'Decamestral'
		when cast(pago_interes as int)=360 then 'Anual'
end)

//////******************************

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =1
where position ('LIB' in NUMEROCREDITO)>0;

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =2
where SUBSTRING(NUMEROCREDITO FROM 1 FOR 4) IN ('2006','2007','2008','2009','2011','2012','2013','2014','2015','2016'); --FOMENTO

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =3
where SUBSTRING(NUMEROCREDITO FROM 1 FOR 4)='2010'; --TESORERIA

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =4
where position ('FAC' in NUMEROCREDITO)>0;

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =6
where position ('CAR' in NUMEROCREDITO)>0;


---------------------------------------------------
----m_cli_detalle_liquidacion_cuota PARA SUBIR EL PLAN DE PAGOS
---------------------------------------------------

insert into m_cli_detalle_liquidacion_cuota (m_cli_liquidacion_cuotaid,m_cli_credito_aprobadoid,
numerocuota,inicioliquidacion,
finliquidacion,fechapago,
saldoanteriorcredito,valorcuota,
saldoanteriorcapital,capitalperiodo,saldoactualcapital,
saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,interescorrienteperiodo,saldoactualcorriente,
saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,saldoactualmoratorios,cuotaseguro,
saldoactualseguro,saldonuevocredito,creacion,saldoanteriorseguro,abonocapital,abonocorriente,abonomoratorios,
abonoseguro)
SELECT --Solo las cuotas que tienen movimiento en el historico
	mclc.id , --m_cli_liquidacion_cuotaid
	mcca.id , --m_cli_credito_aprobadoid
	cast(xpp.cuota as integer) , --numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'), 'yyyy-mm-dd') , --inicioliquidacion
	xpp.fecha_vencimiento , --finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') , --fechapago
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0) , --saldoactualcapital
	0 , --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer) , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0) , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente 
	0 , --Saldo anterior moratorio , tabla diana
	0 , --dias mora, tabla diana
	0 , --interesmoratorioperiodo
	0 ,--porcentajemora
	0 , --saldoactualmoratorios
	coalesce(valor_seguro,0) , --cuotaseguro
	0 , --saldoactualseguro
	0 , --saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 , --saldoanteriorseguro
	coalesce(xh.deuda,0) , --abonocapital
	coalesce(xh.interes_corriente,0) , --abonocorriente
	coalesce(xh.mora,0) , --abonomoratorios
	coalesce(xh.seguro,0) --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(
		select ced_cliente,numero_colocacion,cuota,--valor_desembolso,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then VALOR_TRANSACCION end)  interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then valor_transaccion end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then valor_transaccion end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then valor_transaccion end ) mora,
		sum(saldo_capital)
		from xeo_historico
		where cuota is not null
		group by 1,2,3--,4
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(COALESCE(xh.cuota,'0')AS INTEGER) = CAST(COALESCE(xpp.cuota,'0') AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
union
SELECT --Las cuotas que no tienen movimiento en el historico
	mclc.id , 	--mclc.id
	mcca.id ,	--mca.id
	cast(xpp.cuota as integer) ,	--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd') , 'yyyy-mm-dd') ,	--inicioliquidacion
	xpp.fecha_vencimiento ,		--finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd') , 'yyyy-mm-dd') ,	--fechapago
	0  ,		--saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) ,	--valorcuota
	0  ,	--saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , 	--capitalperiodo
	coalesce(xpp.valor_capital,0) , 	--saldoactualcapital
	0  ,	--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer) , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  ,	--porcentajecorriente
	coalesce(xpp.valor_interes,0) ,	--interescorrienteperiodo
	0 , 			--saldoactualcorriente
	0 ,			--saldoanteriormoratorios
	0 , 			--dias mora, tabla diana
	0 ,			--interesmoratorioperiodo
	0 ,			--porcentajemora
	0 ,			--saldoactualmoratorios
	coalesce(valor_seguro,0)     ,	--cuotaseguro
	0 ,								--saldoactualseguro
	0 , 								--saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd'),					--creacion
	0 ,							--saldoanteriorseguro
	0 ,								--abonocapital
	0 ,								--abonocorriente
	0 ,								--abonomoratorios
	0 								--abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
		select numero_colocacion,max (CAST(cuota AS INTEGER)) cuota
		from xeo_historico
		where cuota is not null
		group by numero_colocacion		
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(xpp.cuota AS INTEGER)>CAST(xh.cuota AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT  --para aquellos creditos que solo tienen una cuota a pagar
	mclc.id ,
	mcca.id ,
	cast(xpp.cuota as integer) ,
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'), 'yyyy-mm-dd') ,
	xpp.fecha_vencimiento,
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd') , 'yyyy-mm-dd') ,
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0) + coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) , --saldoactualcapital
	0 , --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer)	      , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente
	0 , --Saldo anterior moratorio , tabla diana
	0 , --diasmora
	0 , --interesmoratorioperiodo
	0 , --porcentajemora
	0 , --saldoactualmoratorios
	coalesce(valor_seguro,0) , --cuotaseguro
	0 ,  --saldoactualseguro
	0 , --saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 , -- saldoanteriorseguro
	0 , --abonocapital
	0 , --abonocorriente
	0 , --abonomoratorios
	0  --abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
	SELECT NUMERO_COLOCACION,COUNT(COALESCE(CUOTA,'0'))
		FROM XEO_HISTORICO
		--WHERE numero_colocacion not in ('LIB-0002395','LIB-0002463','LIB-0002465','LIB-0002470','LIB-0002763')
		GROUP BY NUMERO_COLOCACION
		HAVING COUNT(COALESCE(CUOTA,'0'))=1	
	) xh
		on (xh.numero_colocacion = xpp.numero_credito )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT --Solo los creditos que tienen cuota cero y que ya tienen un movimiento en historico; los que son nuevos se crean en otro select
	--adicionalmente el saldo del interes es cero por que se le descuenta total del credito.
	mclc.id , --m_cli_liquidacion_cuotaid
	mcca.id , --m_cli_credito_aprobadoid
	cast(xpp.cuota as integer) ,--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'), 'yyyy-mm-dd') , --inicioliquidacion
	xpp.fecha_vencimiento , --finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') , --fechapago
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) , --coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0) ||','||--saldoactualcapital
	0 , --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer) , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0) , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente 
	0 , --Saldo anterior moratorio , tabla diana
	0 , --dias mora, tabla diana
	0 , --interesmoratorioperiodo
	0 , --porcentajemora
	0 , --saldoactualmoratorios
	0 , --cuotaseguro
	0 , --saldoactualseguro
	0 ,  --saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd') , --creacion
	0 ,--saldoanteriorseguro
	0 ,--abonocapital
	0 ,--abonocorriente
	0 ,--abonomoratorios
	0  --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))

where mcca.numerocredito IN (
'CAR-070','CAR-080','CAR-081','CAR-082','CAR-083','CAR-084','CAR-085','CAR-086','CAR-087','CAR-088','CAR-089','CAR-090',
'CAR-091','CAR-092','CAR-093','CAR-094','CAR-095','CAR-096','CAR-097','CAR-098','CAR-099','CAR-100','CAR-101','CAR-102',
'CAR-103','CAR-104','CAR-105.','CAR-106','CAR-107','CAR-108','CAR-109','CAR-110','CAR-111','CAR-112','CAR-113','CAR-114',
'CAR-115','CAR-116','CAR-117','CAR-118','CAR-119','CAR-120','CAR-121','CAR-122','CAR-123','CAR-124','CAR-125','CAR-126.',
'CAR-127.','CAR-128','CAR-129','CAR-130.','CAR-131','CAR-132','CAR-133','CAR-134','CAR-135','CAR-136-','CAR-137*',
'CAR-138','CAR-139','CAR-140','CAR-141','CAR-142','CAR-143','CAR-144*','CAR-145','CAR-146','CAR-147','CAR-148','CAR-149',
'CAR-150','CAR-151','CAR-152','CAR-153','CAR-154','CAR-155','CAR-156','CAR-157','CAR-158','CAR-159','CAR-160','CAR-161*',
'CAR-162','CAR-163','CAR-164','CAR-165***','CAR-166','CAR-167','CAR-168','CAR-169','CAR-170','CAR-171*','CAR-172','CAR-173',
'CAR-174*','CAR-175','CAR-176','CAR-177','CAR-178','CAR-179-','CAR-181','CAR-182','CAR-183','CAR-185','CAR-186','CAR-187',
'CAR-188*','CAR-189','CAR-191','FAC-101','FAC-102','FAC-103','FAC-104','FAC-105','FAC-106*','FAC-107','FAC-108','FAC-109')
AND CAST(COALESCE(xpp.cuota,'0') AS INTEGER)=0


-------------------------------------------------------------------------
Subir los planes de pagos y el detalle 
-------------------------------------------------------------------------

insert into m_cli_plan_pagos (consecutivo,fecha,estado,descripcion,fechaanulacion,creacion)
select consecutivo,fecha,estado,descripcion,null,creacion
 from m_cli_liquidacion_cuota;
 
 insert into m_cli_detalle_plan_pagos (m_cli_plan_pagosid,m_cli_credito_aprobadoid,numerocuota,inicioliquidacion,finliquidacion,fechapago,valorcuota,saldoanteriorcredito,saldoanteriorcapital,capitalperiodo,abonocapital,saldoactualcapital,saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,
 interescorrienteperiodo,abonocorriente,saldoactualcorriente,saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,abonomoratorios,
 saldoanteriorseguro,cuotaseguro,abonoseguro,saldoactualseguro,saldoanteriorotros,cuotaotros,abonootros,saldoactualotros,saldonuevocredito,creacion)
select  mcpp.id,m_cli_credito_aprobadoid,numerocuota,inicioliquidacion,finliquidacion,fechapago,mcdlc.valorcuota,saldoanteriorcredito,saldoanteriorcapital,capitalperiodo,abonocapital,saldoactualcapital,saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,
 interescorrienteperiodo,abonocorriente,saldoactualcorriente,saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,abonomoratorios,
 saldoanteriorseguro,cuotaseguro,abonoseguro,saldoactualseguro,saldoanteriorotros,cuotaotros,abonootros,saldoactualotros,saldonuevocredito,mcdlc.creacion
from m_cli_detalle_liquidacion_cuota mcdlc
inner join m_cli_credito_aprobado mcca on (mcdlc.m_cli_credito_aprobadoid=mcca.id) 
inner join m_cli_plan_pagos mcpp on (mcca.numerocredito=substring(mcpp.descripcion from position ('Num.Credito:' in mcpp.descripcion)+12 for char_length(mcpp.descripcion)));


-------------------------------------------------------------------------------
Todos los creditos se cargan el valor que pago en el valor y en el abono
----m_cli_detalle_liquidacion_cuota 
-------------------------------------------------------------------------------

insert into m_cli_detalle_liquidacion_cuota (m_cli_liquidacion_cuotaid,m_cli_credito_aprobadoid,
numerocuota,inicioliquidacion,
finliquidacion,fechapago,
saldoanteriorcredito,valorcuota,
saldoanteriorcapital,capitalperiodo,saldoactualcapital,
saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,interescorrienteperiodo,saldoactualcorriente,
saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,saldoactualmoratorios,cuotaseguro,
saldoactualseguro,saldonuevocredito,creacion,saldoanteriorseguro,abonocapital,abonocorriente,abonomoratorios,
abonoseguro)
SELECT mclc.id,--m_cli_liquidacion_cuotaid
	mcca.id ,--m_cli_credito_aprobadoid
	cast (xpp.cuota as integer) ,--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),--inicioliquidacion
	xpp.fecha_vencimiento,--finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd'),--fechapago
	0 ,--saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0),--valorcuota
	0 ,--saldoanteriorcapital
	coalesce(xh.deuda,0),--capitalperiodo
	0,--saldoactualcapital
	0,--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer),--diasinterescorriente
	coalesce(xpp.tasa_periodo,0) ,--porcentajecorriente
	coalesce(xh.interes_corriente,0) ,--interescorrienteperiodo
	0 ,--saldoactualcorriente 
	0 ,--Saldo anterior moratorio , tabla diana
	coalesce(xh.dd_mora,0) ,--dias mora, tabla diana
	coalesce(xh.mora,0),--interesmoratorioperiodo
	0 ,--porcentajemora
	0 ,--saldoactualmoratorios
	coalesce(xh.seguro,0)  ,--cuotaseguro
	0 ,--saldoactualseguro
	0 , --saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'),--creacion
	0 ,--saldoanteriorseguro
	coalesce(xh.deuda,0) ,--abonocapital
	coalesce(xh.interes_corriente,0) ,--abonocorriente
	coalesce(xh.mora,0) ,--abonomoratorios
	coalesce(xh.seguro,0) --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(
		select ced_cliente,numero_colocacion,cuota,--valor_desembolso,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)  interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then cast(dd as integer) end ) dd_mora,
		sum(coalesce(saldo_capital,0))
		from xeo_historico
		where cuota is not null
		group by 1,2,3--,4
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(COALESCE(xh.cuota,'0')AS INTEGER) = CAST(COALESCE(xpp.cuota,'0') AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
union
SELECT --Las cuotas que no tienen movimiento en el historico
	mclc.id, 	--mclc.id
	mcca.id ,		--mca.id
	cast (xpp.cuota as integer) ,		--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),	--inicioliquidacion
	xpp.fecha_vencimiento,		--finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd'),	--fechapago
	0 ,		--saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) ,	--valorcuota
	0 ,	--saldoanteriorcapital
	coalesce(xpp.valor_capital,0) ,	--capitalperiodo
	coalesce(xpp.valor_capital,0) ,	--saldoactualcapital
	0 ,	--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer),--diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  ,	--porcentajecorriente
	coalesce(xpp.valor_interes,0) ,	--interescorrienteperiodo
	0 , 			--saldoactualcorriente
	0 ,--saldoanteriormoratorios
	0 ,--dias mora, tabla diana
	0 ,--interesmoratorioperiodo
	0 ,--porcentajemora
	0 ,--saldoactualmoratorios
	coalesce(valor_seguro,0),--cuotaseguro
	0 ,						--saldoactualseguro
	0 ,--saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'),--creacion
	0 ,								--saldoanteriorseguro
	0 ,--abonocapital
	0 ,--abonocorriente
	0 ,--abonomoratorios
	0 --abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
		select numero_colocacion,max (CAST(cuota AS INTEGER)) cuota
		from xeo_historico
		where cuota is not null
		group by numero_colocacion		
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(xpp.cuota AS INTEGER)>CAST(xh.cuota AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT  --para aquellos creditos que solo tienen una cuota a pagar
	mclc.id,
	mcca.id ,
	cast(xpp.cuota as integer) ,
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),
	xpp.fecha_vencimiento,
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd'),
	0,--saldoanteriorcredito
	coalesce(xpp.valor_capital,0) + coalesce(xpp.valor_interes,0) ,--valorcuota
	0 ,--saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) , --saldoactualcapital
	0 ,--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer)      ,--diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  ,--porcentajecorriente
	coalesce(xpp.valor_interes,0) ,--interescorrienteperiodo
	0 ,--saldoactualcorriente
	0 ,--Saldo anterior moratorio , tabla diana
	0 ,--diasmora
	0 ,--interesmoratorioperiodo
	0 ,--porcentajemora
	0 ,--saldoactualmoratorios
	coalesce(valor_seguro,0)    ,--cuotaseguro
	0,--saldoactualseguro
	0 ,--saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 , -- saldoanteriorseguro
	0 , --abonocapital
	0 , --abonocorriente
	0 , --abonomoratorios
	0 --abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
	SELECT NUMERO_COLOCACION,COUNT(COALESCE(CUOTA,'0'))
		FROM XEO_HISTORICO
		--WHERE numero_colocacion not in ('LIB-0002395','LIB-0002463','LIB-0002465','LIB-0002470','LIB-0002763')
		GROUP BY NUMERO_COLOCACION
		HAVING COUNT(COALESCE(CUOTA,'0'))=1	
	) xh
		on (xh.numero_colocacion = xpp.numero_credito )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT --Solo los creditos que tienen cuota cero y que ya tienen un movimiento en historico; los que son nuevos se crean en otro select
	--adicionalmente el saldo del interes es cero por que se le descuenta total del credito.
	mclc.id,--m_cli_liquidacion_cuotaid
	mcca.id ,--m_cli_credito_aprobadoid
	cast(xpp.cuota as integer) ,--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),--inicioliquidacion
	xpp.fecha_vencimiento, --finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd') , --fechapago
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) ,--coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0) ||','||--saldoactualcapital
	0, --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer), --diasinterescorriente
	coalesce(xpp.tasa_periodo,0) , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente 
	0 , --Saldo anterior moratorio , tabla diana
	0 , --dias mora, tabla diana
	0 , --interesmoratorioperiodo
	0 , --porcentajemora
	0 , --saldoactualmoratorios
	0 , --cuotaseguro
	0 , --saldoactualseguro
	0 , --saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 ,--saldoanteriorseguro
	0 ,--abonocapital
	0 ,--abonocorriente
	0 ,--abonomoratorios
	0 --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))

where mcca.numerocredito IN (
'CAR-070','CAR-080','CAR-081','CAR-082','CAR-083','CAR-084','CAR-085','CAR-086','CAR-087','CAR-088','CAR-089','CAR-090',
'CAR-091','CAR-092','CAR-093','CAR-094','CAR-095','CAR-096','CAR-097','CAR-098','CAR-099','CAR-100','CAR-101','CAR-102',
'CAR-103','CAR-104','CAR-105.','CAR-106','CAR-107','CAR-108','CAR-109','CAR-110','CAR-111','CAR-112','CAR-113','CAR-114',
'CAR-115','CAR-116','CAR-117','CAR-118','CAR-119','CAR-120','CAR-121','CAR-122','CAR-123','CAR-124','CAR-125','CAR-126.',
'CAR-127.','CAR-128','CAR-129','CAR-130.','CAR-131','CAR-132','CAR-133','CAR-134','CAR-135','CAR-136-','CAR-137*',
'CAR-138','CAR-139','CAR-140','CAR-141','CAR-142','CAR-143','CAR-144*','CAR-145','CAR-146','CAR-147','CAR-148','CAR-149',
'CAR-150','CAR-151','CAR-152','CAR-153','CAR-154','CAR-155','CAR-156','CAR-157','CAR-158','CAR-159','CAR-160','CAR-161*',
'CAR-162','CAR-163','CAR-164','CAR-165***','CAR-166','CAR-167','CAR-168','CAR-169','CAR-170','CAR-171*','CAR-172','CAR-173',
'CAR-174*','CAR-175','CAR-176','CAR-177','CAR-178','CAR-179-','CAR-181','CAR-182','CAR-183','CAR-185','CAR-186','CAR-187',
'CAR-188*','CAR-189','CAR-191','FAC-101','FAC-102','FAC-103','FAC-104','FAC-105','FAC-106*','FAC-107','FAC-108','FAC-109')
AND CAST(COALESCE(xpp.cuota,'0') AS INTEGER)=0

//***************************************************************************************************************************
//***************************************************************************************************************************
//Para hallar los saldos actuales de todas las cuotas.
//***************************************************************************************************************************
//***************************************************************************************************************************

update  M_CLI_DETALLE_LIQUIDACION_CUOTA set 
	saldoactualcapital=0,saldoactualcorriente=0,saldoactualseguro=0,saldoactualmoratorios=0;
	
update	m_cli_detalle_liquidacion_cuota 
set 	saldoactualcapital = coalesce(capitalperiodo,0)-coalesce(abonocapital,0) ;

update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualcorriente = coalesce(INTERESCORRIENTEPERIODO,0) -coalesce(ABONOCORRIENTE,0) ;

update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualmoratorios = coalesce(interesmoratorioperiodo,0) - coalesce(abonomoratorios,0) ;
	
update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualseguro = coalesce(cuotaseguro,0) - coalesce(ABONOSEGURO,0);
	
update 	m_cli_detalle_liquidacion_cuota 			*/
set 	saldonuevocredito = coalesce(saldoactualcapital,0) 	+ 
	coalesce(saldoactualcorriente,0) 			+ 
	coalesce(saldoactualmoratorios,0) 			+ 
	coalesce(saldoactualseguro,0) ;
						

//////******************************
//////***************************************
//////******************************************** 

Este proceso es para los que tienen MORA.

El proceso de los que tienen mora seran calculados a partir de una fecha dada en el sistema.

Ejecutar los archivos de TOTAL - MORA (correo electrónico).

//////*********************************************
//////***************************************
//////******************************

/*
UPDATE M_CLI_DETALLE_LIQUIDACION_CUOTA MCDLC */
SET 
	porcentajemora=((32.985/100)/360)*diasmora
FROM M_CLI_LIQUIDACION_CUOTA MCLC
WHERE MCLC.ID=MCDLC.M_CLI_LIQUIDACION_CUOTAID 
--AND mcdlc.NUMEROCUOTA=
--AND substring(MCLC.descripcion from position ('Num.Credito:' in MCLC.descripcion)+12 for char_length(MCLC.descripcion)) = '2006-02-335'

UPDATE M_CLI_DETALLE_LIQUIDACION_CUOTA MCDLC */
SET 
	interesmoratorioperiodo=ROUND(((32.985/100)/360)*diasmora*saldoactualcapital)
FROM M_CLI_LIQUIDACION_CUOTA MCLC
WHERE MCLC.ID=MCDLC.M_CLI_LIQUIDACION_CUOTAID 
*/


//***************************************************************************************************************************
//Para verificar informacion que se encuentra en detalle_liquidacion_cuota, para revision de saldos actuales de los creditos.
//***************************************************************************************************************************

------ Con operaciones para los saldos

select  NUMEROCREDITO,CAST(NUMEROCUOTA AS INTEGER) CUOTAS,
CAPITALPERIODO,ABONOCAPITAL,CAPITALPERIODO-ABONOCAPITAL as saldo_capital,
INTERESCORRIENTEPERIODO,ABONOCORRIENTE,INTERESCORRIENTEPERIODO-ABONOCORRIENTE as saldo_interes,
CUOTASEGURO,ABONOSEGURO,CUOTASEGURO-ABONOSEGURO as saldo_seguro,
ABONOMORATORIOS
 from m_cli_detalle_liquidacion_cuota MCDLC
INNER JOIN M_CLI_CREDITO_APROBADO MCCA ON (
MCDLC.M_CLI_CREDITO_APROBADOID=MCCA.ID 
AND FORMADEEXTINCION='Vigente'
AND NUMEROCREDITO='LIB-0002233'
)
ORDER BY 2

---------- con saldos 

select  NUMEROCREDITO,CAST(NUMEROCUOTA AS INTEGER) CUOTAS,
CAPITALPERIODO,ABONOCAPITAL,saldoActualCapital,
INTERESCORRIENTEPERIODO,ABONOCORRIENTE,saldoactualcorriente,
CUOTASEGURO,ABONOSEGURO,saldoactualseguro,
ABONOMORATORIOS
 from m_cli_detalle_liquidacion_cuota MCDLC
INNER JOIN M_CLI_CREDITO_APROBADO MCCA ON (
MCDLC.M_CLI_CREDITO_APROBADOID=MCCA.ID 
--AND FORMADEEXTINCION='Vigente'
--AND NUMEROCREDITO='LIB-0002233'
)
ORDER BY 2

------------------------------------------------------------------------
Asignacion de saldos a los creditos que no se encuentran a paz y salvo
------------------------------------------------------------------------
select CASE WHEN SALDO_CAPITAL>0 THEN 'UPDATE m_cli_detalle_liquidacion_cuota mclc set saldoactualcapital='||saldo_capital||' from m_cli_credito_aprobado mcca where mcca.id=mclc.m_cli_credito_aprobadoid and numerocuota='||m_cuota||' and numerocredito="'||numero_credito||'";' END,
	CASE WHEN SALDO_INTERES>0 THEN 'UPDATE m_cli_detalle_liquidacion_cuota mclc set saldoactualcorriente='||saldo_interes||' from m_cli_credito_aprobado mcca where mcca.id=mclc.m_cli_credito_aprobadoid and numerocuota='||m_cuota||' and numerocredito="'||numero_credito||'";' END,
	CASE WHEN SALDO_SEGURO>0 THEN 'UPDATE m_cli_detalle_liquidacion_cuota mclc set saldoactualseguro='||saldo_seguro||' from m_cli_credito_aprobado mcca where mcca.id=mclc.m_cli_credito_aprobadoid and numerocuota='||m_cuota||' and numerocredito="'||numero_credito||'";' END
from 
(
	select 
	xpp.numero_credito,
	
	--xpp.cuota,
	sum(coalesce(xpp.valor_capital,0)) as deuda_pp,sum(coalesce(xh.deuda,0)) as deuda_h,
	sum(coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0)) as saldo_capital,
	
	sum(coalesce(xpp.valor_interes,0)) as int_pp,sum(coalesce(xh.interes_corriente,0)) as int_h,
	sum(coalesce(xpp.valor_interes,0)-coalesce(xh.interes_corriente,0)) as saldo_interes,
	
	sum(coalesce(xpp.valor_seguro,0)) as seg_pp,sum(coalesce(xh.seguro,0)) as seg_h, 
	sum(coalesce(xpp.valor_seguro,0)-coalesce(xh.seguro,0)) as saldo_seguro,

	sum(mora) as mora_h, 

	(select max(cuota) from xeo_historico xh where numero_colocacion=xpp.numero_credito) as m_cuota,

	(select max(fecha_movimiento) from xeo_historico xh where numero_colocacion=xpp.numero_credito) as fec_mov
	from 	
	xeo_plandepagos xpp
	inner join 
	(
		select ced_cliente,xh1.numero_colocacion,cuota,--valor_desembolso,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)  interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then cast(dd as integer) end ) dd_mora,
		sum(coalesce(saldo_capital,0))
		from xeo_historico xh1
		inner join (select numero_colocacion from xeo_historico where cuota is null and transaccion='VIGENTE') xh2
		ON (xh1.numero_colocacion=xh2.numero_colocacion)
		where cuota is not null
		group by 1,2,3--,4
		) xh
		on (xh.numero_colocacion = xpp.numero_credito and 
			CAST(COALESCE(xh.cuota,'0')AS INTEGER) = CAST(COALESCE(xpp.cuota,'0') AS INTEGER) )
		where xh.numero_colocacion in 
		('2010-01-437','2010-01-438','2013-02-503','2013-02-504','2014-02-507','2014-02-508','2014-02-512.','2014-02-513',
		'2014-02-514','2014-02-515','2014-02-516','2014-02-517','2015-01-524','2015-01-526','2015-01-527','2015-01-529','2015-02-520','2016-01-531','CAR-107','CAR-145','CAR-165***',
		'CAR-166','CAR-167','CAR-168','CAR-169','CAR-170','CAR-171*','CAR-178','CAR-181','FAC-103','FAC-106*','FAC-107','FAC-108','FAC-109','LIB- 0001869','LIB-0001237','LIB-0001250',
		'LIB-0001255','LIB-0001258','LIB-0001271','LIB-0001299','LIB-0001301','LIB-0001308','LIB-0001318','LIB-0001376','LIB-0001389','LIB-0001392','LIB-0001395-','LIB-0001405','LIB-0001428',
		'LIB-0001448','LIB-0001451','LIB-0001454','LIB-0001459','LIB-0001462','LIB-0001469','LIB-0001474','LIB-0001475','LIB-0001488','LIB-0001492','LIB-0001494','LIB-0001495','LIB-0001498','LIB-0001500',
		'LIB-0001511','LIB-0001516','LIB-0001551','LIB-0001568','LIB-0001570','LIB-0001576','LIB-0001578','LIB-0001587','LIB-0001595','LIB-0001601','LIB-0001606','LIB-0001613','LIB-0001621',
		'LIB-0001622',
		'LIB-0001625','LIB-0001626','LIB-0001627','LIB-0001628','LIB-0001656','LIB-0001663','LIB-0001664','LIB-0001673','LIB-0001677','LIB-0001678','LIB-0001693','LIB-0001694','LIB-0001696','LIB-0001697','LIB-0001701',
		'LIB-0001705','LIB-0001706','LIB-0001707','LIB-0001710','LIB-0001719','LIB-0001720','LIB-0001721','LIB-0001723','LIB-0001726','LIB-0001731','LIB-0001735','lib-0001737','LIB-0001740','LIB-0001743','LIB-0001748',
		'LIB-0001749','LIB-0001753','LIB-0001756','LIB-0001762.','LIB-0001763.','LIB-0001764.','LIB-0001766','LIB-0001769','LIB-0001770','LIB-0001772','LIB-0001779*','LIB-0001781','LIB-0001782',
		'LIB-0001787','LIB-0001788','LIB-0001789','LIB-0001791','LIB-0001801','LIB-0001805','LIB-0001806','LIB-0001808','LIB-0001809','LIB-0001812','LIB-0001813*','LIB-0001814','LIB-0001823',
		'LIB-0001825','LIB-0001826','LIB-0001829','LIB-0001831','LIB-0001834','LIB-0001840','LIB-0001841','LIB-0001845','LIB-0001847','LIB-0001850','LIB-0001859','LIB-0001862','LIB-0001864','LIB-0001866',
		'LIB-0001867','LIB-0001870','LIB-0001877','LIB-0001879','LIB-0001882','LIB-0001886','LIB-0001890','LIB-0001891','LIB-0001895','LIB-0001896','LIB-0001897','LIB-0001899','LIB-0001900',
		'LIB-0001902','LIB-0001903','LIB-0001904','LIB-0001905','LIB-0001909','LIB-0001910','LIB-0001911','LIB-0001916','LIB-0001917','LIB-0001918','LIB-0001922','LIB-0001924','LIB-0001925',
		'LIB-0001928','LIB-0001929','LIB-0001930','LIB-0001933','LIB-0001934','LIB-0001935','LIB-0001936','LIB-0001937','LIB-0001938','LIB-0001939','LIB-0001940','LIB-0001942','LIB-0001954',
		'LIB-0001955','LIB-0001958','LIB-0001961','LIB-0001962','LIB-0001965','LIB-0001968','LIB-0001969','LIB-0001973','LIB-0001974','LIB-0001975','LIB-0001976','LIB-0001977','LIB-0001978',
		'LIB-0001979','LIB-0001980','LIB-0001981','LIB-0001983','LIB-0001985','LIB-0001986','LIB-0001987','LIB-0001988','LIB-0001989','LIB-0001990','LIB-0001992','LIB-0001996','LIB-0001997',
		'LIB-0001999','LIB-0002001','LIB-0002002','LIB-0002003','LIB-0002004','LIB-0002005','LIB-0002006','LIB-0002008','LIB-0002009','LIB-0002011','LIB-0002013','LIB-0002014','LIB-0002015',
		'LIB-0002016','LIB-0002017','LIB-0002018','LIB-0002019','LIB-0002021','LIB-0002025','LIB-0002026','LIB-0002027','LIB-0002029','LIB-0002030','LIB-0002031','LIB-0002032','LIB-0002038','LIB-0002039','LIB-0002040','LIB0002041',
		'LIB-0002042','LIB-000-2045','LIB-0002052','LIB-0002053','LIB-0002056','LIB-0002061','LIB-0002063','LIB-0002064','LIB-0002065','LIB-0002067','LIB-0002071','LIB-0002075','LIB-0002076',
		'LIB-0002077','LIB-0002078','LIB-0002080','LIB-0002081','LIB-0002082','LIB-0002086','LIB-0002090','LIB-0002095','LIB-0002096','LIB-0002098','LIB-0002099','LIB-0002100','LIB-0002105',
		'LIB-0002107','LIB-0002111','LIB-0002115','LIB-0002116','LIB-0002119','LIB-0002122','LIB-0002123','LIB-0002129','LIB-0002130','LIB-0002131','LIB-0002132','LIB-0002133','LIB-0002134',
		'LIB-0002135','LIB-0002139','LIB-0002140','LIB-0002141','LIB-0002142','LIB-0002145','LIB-0002146','LIB-0002148','LIB-0002149','LIB-0002150','LIB-0002152','LIB-0002155','LIB-0002158',
		'LIB-0002159','LIB-0002160','LIB-0002161','LIB-0002162','LIB-0002163','LIB-0002164','LIB-0002167','LIB-0002171','LIB-0002172','LIB-0002173','LIB-0002175','LIB-0002176','LIB-0002180',
		'LIB-0002181','LIB-0002182','LIB-0002183','LIB-0002184','LIB-0002186','LIB-0002187','LIB-0002194','LIB-0002198','LIB-0002203','LIB-0002204','LIB-0002209','LIB-0002210','LIB-0002213',
		'LIB-0002214','LIB-0002222','LIB-0002226','LIB-0002227','LIB-0002229','LIB-0002230','LIB-0002234','LIB-0002241','LIB-0002244','LIB-0002245','LIB-0002246','LIB-0002251','LIB-0002255',
		'LIB-0002257','LIB-0002262','LIB-0002264','LIB-0002268','LIB-0002271','LIB-0002273','LIB-0002274','LIB-0002275','LIB-0002276','LIB-0002277','LIB-0002278','LIB-0002279','LIB-0002280',
		'LIB-0002281','LIB-0002284','LIB-0002290','LIB-0002296','LIB-0002297','LIB-0002299','LIB-0002302','LIB-0002304','LIB-0002305','LIB-0002307','LIB-0002310','LIB-0002314','LIB-0002315',
		'LIB-0002317','LIB-0002318','LIB-0002320','LIB-0002321','LIB-0002323','LIB-0002326','LIB-0002327','LIB-0002329','LIB-0002330','LIB-0002333','LIB-0002334','LIB-0002345','LIB-0002347',
		'LIB-0002357','LIB-0002361','LIB-0002364','LIB-0002366','LIB-0002367','LIB-0002368','LIB-0002374','LIB-0002380','LIB-0002383','LIB-0002385','LIB-0002386','LIB-0002388','LIB-0002392',
		'LIB-0002397','LIB-0002400','LIB-0002405','LIB-0002408','LIB-0002416','LIB-0002420','LIB-0002421','LIB-0002425','LIB-0002435','LIB-0002440','LIB-0002444','LIB-0002450','LIB-0002452',
		'LIB-0002457','LIB-0002461','LIB-0002481','LIB-0002485','LIB-0002487','LIB-0002497','LIB-0002498','LIB-0002501','LIB-0002505','LIB-0002513','LIB-0002514','LIB-0002516','LIB-0002521','LIB-0002523',
		'LIB-0002525','LIB-0002536','LIB-0002537','LIB-0002554','LIB-0002648','LIB-0002649','LIB-0002652','LIB-0002654','LIB-0002655','LIB-0002656','LIB-0002658','LIB-0002660','LIB-0002662',
		'LIB-0002665','LIB-0002667','LIB-0002670','LIB-0002671','LIB-0002672','LIB-0002673','LIB-0002674','LIB-0002677','LIB-0002679','LIB-0002680','LIB-0002686','LIB-0002687','LIB-0002688',
		'LIB-0002691','LIB-0002701','LIB-0002702','LIB-0002704','LIB-0002725','LIB-0002726','LIB-0002727','LIB-0002728','LIB-0002732','LIB-0002733','LIB-0002742','LIB-0002743','LIB-0002746',
		'LIB-0002752','LIB-0002753','LIB-0002754','LIB-0002756','LIB-0002762','LIB-0002763','LIB-0002764','LIB-0002765','LIB-0002800','LIB-0002802','LIB-0002803','LIB-0002834','LIB-1718')
		group by 1
		oRDER BY 1
) xsaldo;




-------------------------------------------------------------------------
Tomar los updates quitar las comillas dobles y ejecutarlos.
-------------------------------------------------------------------------

-------------------------------------------------------------------------
Se actualiza la informacion de los saldos, debido al cambio en la informacion de los saldos
-------------------------------------------------------------------------
update 	m_cli_detalle_liquidacion_cuota 			
set 	saldonuevocredito = coalesce(saldoactualcapital,0) 	+ 
	coalesce(saldoactualcorriente,0) 			+ 
	coalesce(saldoactualmoratorios,0) 			+ 
	coalesce(saldoactualseguro,0) ;

-------------------------------------------------------------------------
----m_cli_detalle_comprobante_credito	con detalle liquidacion cuota 					
-------------------------------------------------------------------------

insert into m_cli_detalle_comprobante_credito 
(m_cli_comprobante_creditoid,m_cli_credito_aprobadoid,creacion,m_cli_detalle_liquidacion_cuotaid,descripcion,valor)
select 
mccc.id,mcca.id, to_date('2017-01-01','yyyy-mm-dd'),mcdlc.id,mccc.descripcion,xh.valor
from
(select numero_colocacion,fecha_movimiento,cuota,sum(coalesce(valor_transaccion,0)) valor
from xeo_historico
where cuota is not null
group by 1,2,3) xh

inner join 
	(select id,numerocredito
		from m_cli_credito_aprobado
	) mcca
		on (trim(mcca.numerocredito)=trim(xh.numero_colocacion) )

inner join 
	m_cli_detalle_liquidacion_cuota mcdlc
		on (mcdlc.m_cli_credito_aprobadoid=mcca.id) and (cast(xh.cuota as integer)=mcdlc.numerocuota)
					
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_movimiento))
		
		
-------------------------------------------------------------------------------------------------
Insertar el detalle de los creditos que no tienen movimiento en historico
------------------------------------------------------------------------------------------------
/*insert into m_cli_detalle_comprobante_credito 
(m_cli_comprobante_creditoid,m_cli_credito_aprobadoid,creacion,m_cli_detalle_liquidacion_cuotaid,descripcion,valor)*/
select 
mccc.id,mcca.id, to_date('2017-01-01','yyyy-mm-dd'),mcdlc.id,mccc.descripcion,xh.valor
from
(select numero_colocacion,fecha_desembolso,valor_desembolso valor
from xeo_historico
where cuota is null
group by 1,2,3) xh

inner join 
	(
	select id,numerocredito 
	from m_cli_credito_aprobado
	where numerocredito
	not in (select distinct mcca1.numerocredito
		from m_cli_kardex_credito mckc
		inner join m_cli_credito_aprobado mcca1 on (mckc.m_cli_credito_aprobadoid=mcca1.id) )
	)mcca on (trim(mcca.numerocredito)=trim(xh.numero_colocacion) )

inner join 
	m_cli_detalle_liquidacion_cuota mcdlc
		on (mcdlc.m_cli_credito_aprobadoid=mcca.id) 
					
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_desembolso))

------------------------------------------------------------------------------------------------
----m_cli_kardex_credito 
------------------------------------------------------------------------------------------------
	select 
	--xpp2.numero_credito,xh.numero_colocacion,xpp2.cuota,
	'insert into m_cli_kardex_credito 
	(m_cli_detalle_comprobante_creditoid,
	s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,
	fechatransaccion, 
	username,
	creacion,
	m_cli_credito_aprobadoid,
	acumuladocargocapital,
	acumuladoabonocapital,
	acumuladomoragenerada,
	acumuladoabonomora,
	acumuladocorrientegenerado,
	acumuladoabonocorriente,
	acumuladocuotaseguro,
	acumuladoabonoseguro,
	fecharealdepago,
	m_cli_detalle_liquidacion_cuotaid,
	valortransaccion,
	capitalperiodo,
	abonocapital,
	interescorrienteperiodo,
	abonocorriente,
	interesmoratorioperiodo,
	abonomoratorios,
	cuotaseguro,
	abonoseguro,
	estado) values ('||
	mcdcc.id||--m_cli_detalle_comprobante_creditoid
	',42,187,2017,1,"'||--s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,	
	xh.fecha_movimiento||'","'||--fecha_transaccion
	'admin@siep.com'||'","'||--username
	'01-01-2017'||'",'||--creacion
	mcca.id||','||
	xh.valor_desembolso  ||','|| --coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) ||','||--acumulado cargo capital
	coalesce(xh.deuda,0)||','||--acumulado abono capital
	coalesce(xh.mora,0)||','||--xmora.valor_mora;tabla diana mora acumuladomoragenerada
	COALESCE(xh.mora,0)||','||--xmora.mora; acumuladoabonomora
	coalesce(xh.interes_corriente,0)||','||--acumulado corriente gene
	coalesce(xh.interes_corriente,0)||','||--acumulado abono corriente
	coalesce(xh.seguro,0)||','||--acumulado cuota seguro
	coalesce(xh.seguro,0)||',"'||--acumulado abono seguro
	xh.fecha_movimiento||'",'||--fecha_real_de pago
	mcdlc.id||','||--m_cli_detalle_liquidacion_cuotaid
	coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0)||','||--valor_transaccion
	coalesce(xh.deuda,0)||','||--capitalperiodo
	coalesce(xh.deuda,0)||','||--abono capital
	coalesce(xh.interes_corriente,0)||','||--interes corriente periodo
	coalesce(xh.interes_corriente,0)||','||--abono corriente
	coalesce(xh.mora,0)||','|| --interes moratorio periodo
	COALESCE(xh.mora,0)||','||--xmora.mora;abono moratorios
	coalesce(xh.Seguro,0)||','|| --cuota seguro
	coalesce(xh.Seguro,0)||',"'|| --abono seguro
	'Autorizado'||'");'--estado	
from 
	(select xeoh.numero_colocacion,cuota,
		coalesce(xeoh2.valor_desembolso,0) valor_desembolso,
		fecha_movimiento,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(saldo_capital) capital
		from xeo_historico xeoh
		inner join (select numero_colocacion,valor_desembolso
		 from xeo_historico
		 where cuota is null)xeoh2
		on ( xeoh2.numero_colocacion=xeoh.numero_colocacion )
		where cuota is not null --and xeoh.numero_colocacion='LIB-0002001'
		group by 1,2,3,4		
	) xh
		
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_movimiento))

inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado mcca
	) mcca
	on (trim(mcca.numerocredito)=trim(xh.numero_colocacion))	

inner join 
	(select 
		substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
		from m_cli_liquidacion_cuota) mclc
			on (trim(xh.numero_colocacion) = trim(mclc.credito))

inner join 
	m_cli_detalle_liquidacion_cuota mcdlc 
		on (mcdlc.m_cli_credito_aprobadoid=mcca.id) and (cast(xh.cuota as integer)=mcdlc.numerocuota)
		

inner join 
	m_cli_detalle_comprobante_credito mcdcc
		on (mcdcc.m_cli_comprobante_creditoid = mccc.id
			 and mcdcc.m_cli_credito_aprobadoid=mcca.id
			 and mcdcc.m_cli_detalle_liquidacion_cuotaid=mcdlc.id)


----Insert select 

insert into m_cli_kardex_credito 
	(m_cli_detalle_comprobante_creditoid,
	s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,
	fechatransaccion, 
	username,
	creacion,
	m_cli_credito_aprobadoid,
	acumuladocargocapital,
	acumuladoabonocapital,
	acumuladomoragenerada,
	acumuladoabonomora,
	acumuladocorrientegenerado,
	acumuladoabonocorriente,
	acumuladocuotaseguro,
	acumuladoabonoseguro,
	fecharealdepago,
	m_cli_detalle_liquidacion_cuotaid,
	valortransaccion,
	capitalperiodo,
	abonocapital,
	interescorrienteperiodo,
	abonocorriente,
	interesmoratorioperiodo,
	abonomoratorios,
	cuotaseguro,
	abonoseguro,
	estado)
select 
	
	mcdcc.id,--m_cli_detalle_comprobante_creditoid
	42,187,2017,1,--s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,	
	xh.fecha_movimiento , --fecha_transaccion
	'admin@siep.com' , --username
	 to_date('2017-01-01','yyyy-mm-dd'), --creacion
	mcca.id,
	xh.valor_desembolso  ,--coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) ||','||--acumulado cargo capital
	coalesce(xh.deuda,0) , --acumulado abono capital
	coalesce(xh.mora,0) , --xmora.valor_mora;tabla diana mora acumuladomoragenerada
	COALESCE(xh.mora,0) , --xmora.mora; acumuladoabonomora
	coalesce(xh.interes_corriente,0) , --acumulado corriente gene
	coalesce(xh.interes_corriente,0) , --acumulado abono corriente
	coalesce(xh.seguro,0) , --acumulado cuota seguro
	coalesce(xh.seguro,0) , --acumulado abono seguro
	xh.fecha_movimiento , --fecha_real_de pago
	mcdlc.id , --m_cli_detalle_liquidacion_cuotaid
	coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) , --valor_transaccion
	coalesce(xh.deuda,0) , --capitalperiodo
	coalesce(xh.deuda,0) , --abono capital
	coalesce(xh.interes_corriente,0) , --interes corriente periodo
	coalesce(xh.interes_corriente,0) , --abono corriente
	coalesce(xh.mora,0) ,  --interes moratorio periodo
	COALESCE(xh.mora,0) , --xmora.mora;abono moratorios
	coalesce(xh.Seguro,0) ,  --cuota seguro
	coalesce(xh.Seguro,0) ,  --abono seguro
	'Autorizado' --estado	
from 
	(select xeoh.numero_colocacion,cuota,
		coalesce(xeoh2.valor_desembolso,0) valor_desembolso,
		fecha_movimiento,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(saldo_capital) capital
		from xeo_historico xeoh
		inner join (select numero_colocacion,valor_desembolso
		 from xeo_historico
		 where cuota is null)xeoh2
		on ( xeoh2.numero_colocacion=xeoh.numero_colocacion )
		where cuota is not null --and xeoh.numero_colocacion='LIB-0002001'
		group by 1,2,3,4		
	) xh
		
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_movimiento))

inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado mcca
	) mcca
	on (trim(mcca.numerocredito)=trim(xh.numero_colocacion))	

inner join 
	(select 
		substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
		from m_cli_liquidacion_cuota) mclc
			on (trim(xh.numero_colocacion) = trim(mclc.credito))

inner join 
	m_cli_detalle_liquidacion_cuota mcdlc 
		on (mcdlc.m_cli_credito_aprobadoid=mcca.id) and (cast(xh.cuota as integer)=mcdlc.numerocuota)
		

inner join 
	m_cli_detalle_comprobante_credito mcdcc
		on (mcdcc.m_cli_comprobante_creditoid = mccc.id
			 and mcdcc.m_cli_credito_aprobadoid=mcca.id
			 and mcdcc.m_cli_detalle_liquidacion_cuotaid=mcdlc.id)
order by xh.fecha_movimiento,m_cli_detalle_liquidacion_cuotaid
			 			 			 
--------------------------------------------------
// para adicionar los creditos que no tienen ningún movimiento
--------------------------------------------------
select numerocredito --si esta consulta se modifica debe modificarse en el insert select que sigue,donde dice:(select sin mov.)
from m_cli_credito_aprobado
where numerocredito
not in (select distinct mcca.numerocredito
from m_cli_kardex_credito mckc
inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) )
--where mcca.numerocredito='LIB-0001604'
--order by m_cli_credito_aprobadoid

-----------------------------------
Insert para m_cli_kardex_credito creditos que no tienen movimientos 
-----------------------------------
insert into m_cli_kardex_credito 
	(m_cli_detalle_comprobante_creditoid,
	s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,
	fechatransaccion, 
	username,
	creacion,
	m_cli_credito_aprobadoid,
	acumuladocargocapital,
	acumuladoabonocapital,
	acumuladomoragenerada,
	acumuladoabonomora,
	acumuladocorrientegenerado,
	acumuladoabonocorriente,
	acumuladocuotaseguro,
	acumuladoabonoseguro,
	fecharealdepago,
	m_cli_detalle_liquidacion_cuotaid,
	valortransaccion,
	capitalperiodo,
	abonocapital,
	interescorrienteperiodo,
	abonocorriente,
	interesmoratorioperiodo,
	abonomoratorios,
	cuotaseguro,
	abonoseguro,
	estado)
select 
	null,--m_cli_detalle_comprobante_creditoid
	42,187,2017,1, --s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,	
	xh.fecha_desembolso , --fecha_transaccion
	'admin@siep.com' , --username
	'01-01-2017' , --creacion
	mcca.id , 
	xh.valor_desembolso , --coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) ||','||--acumulado cargo capital
	0 , --acumulado abono capital
	0 , --xmora.valor_mora;tabla diana mora acumuladomoragenerada
	0 , --xmora.mora; acumuladoabonomora
	0 , --acumulado corriente gene
	0 , --acumulado abono corriente
	0 , --acumulado cuota seguro
	0 , --acumulado abono seguro
	xh.fecha_desembolso , --fecha_real_de pago
	null , --m_cli_detalle_liquidacion_cuotaid
	0 , --valor_transaccion
	0 , --capitalperiodo
	0 , --abono capital
	0 , --interes corriente periodo
	0 , --abono corriente
	0 ,  --interes moratorio periodo
	0 , --xmora.mora;abono moratorios
	0 ,  --cuota seguro
	0 ,  --abono seguro
	'Autorizado' --estado	
from (select numero_colocacion,valor_desembolso,fecha_desembolso
		 from xeo_historico
		 where cuota is null and numero_colocacion
		 in (select numerocredito --(select sin mov.)
			from m_cli_credito_aprobado
			where numerocredito
			not in (select distinct mcca.numerocredito
			from m_cli_kardex_credito mckc
			inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) )
			--where mcca.numerocredito='LIB-0001604'
			--order by m_cli_credito_aprobadoid	
			)	
	) xh

inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado mcca
		where (  numerocredito in 
			(select numerocredito --(select sin mov.)
				from m_cli_credito_aprobado
				where numerocredito
				not in (select distinct mcca.numerocredito
				from m_cli_kardex_credito mckc
				inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) )
				--where mcca.numerocredito='LIB-0001604'
				--order by m_cli_credito_aprobadoid
			)
		      )
		
	) mcca
	on (trim(mcca.numerocredito)=trim(xh.numero_colocacion))	


---------------------------------------------------	
///Consultar para verificar los updates que siguen.
---------------------------------------------------	

select * from m_cli_kardex_credito
order by m_cli_credito_aprobadoid

			 

---------------------------------------------------
---- m_cli_kardex_credito 2.
--------------------------------------------------- 
update 
	m_cli_kardex_credito
set
	acumuladoabonocapital = 	
					coalesce((select 
						sum(k1.acumuladoabonocapital) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)

----------

---udpate m_cli_kardex_credito set acumuladocargocapital=acumuladoabonocapital;

---------------------------------------------------
---- m_cli_kardex_credito 4.
---------------------------------------------------
update 
	m_cli_kardex_credito
set
	acumuladoabonocorriente = 	
					coalesce((select 
						sum(k1.acumuladoabonocorriente) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION ),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)

-------------


update m_cli_kardex_credito set acumuladocorrientegenerado=acumuladoabonocorriente;

---------------------------------------------------
---- m_cli_kardex_credito 6.
---------------------------------------------------
update 
	m_cli_kardex_credito
set
	acumuladoabonoseguro = 	
					coalesce((select 
						sum(k1.acumuladoabonoseguro) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)


-----------


	update m_cli_kardex_credito set acumuladocuotaseguro=acumuladoabonoseguro;


---------------------------------------------------
---- m_cli_kardex_credito 8.
---------------------------------------------------
update 
	m_cli_kardex_credito
set
	acumuladoabonomora = 	
					coalesce((select 
						sum(k1.acumuladoabonomora) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION ),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)

--------

update m_cli_kardex_credito set acumuladomoragenerada=acumuladoabonomora;


----------------------------------------------------
Procesos para cuadre de saldos
---------------------------------------------------

1.subir los creditos que tienen saldo en cuotas de capital en la ultima cuota y que no tienen saldo a favor en intereses ni en seguro.

2. Subir los creditos que tienen saldo en cuotas de capital  en la ultima cuota y qut tienen saldo a favor menor al valor de la cuota a pagar.

3. Distribuir los saldos a favor de los intereses entre las cuotas pendientes por pagar, hasta que quede en deuda con la entidad.

---------------------------------------------------
--- m_cli_kardex_cuota						
---------------------------------------------------
insert into m_cli_kardex_cuota (m_cli_kardex_creditoid,m_cli_detalle_liquidacion_cuotaid,abonomoratorios,abonocorriente,abonocapital,abonoseguro,creacion)SELECT 
	mckc.id,
	mckc.m_cli_detalle_liquidacion_cuotaid,
	coalesce(abonomoratorios,0),--coalesce(xh.mora,0)
	coalesce(abonocorriente,0),
	coalesce(abonocapital,0),
	coalesce(abonoseguro,0),
	'01-01-2017'

from   	m_cli_kardex_credito mckc
where m_cli_detalle_liquidacion_cuotaid is not null

-------------------------------------------------------
Tablas conceptos
-------------------------------------------------------
m_cli_concepto_credito

1;"001";"Capital";TRUE;"Capital";;;;"Capital";TRUE;"2017-04-19 10:57:40.314"
2;"002";"Interes corriente";TRUE;"Interes corriente";;;;"Interes corriente";TRUE;"2017-04-19 10:57:40.314"
3;"003";"Interes moratorio";TRUE;"Interes moratorio";;;;"Interes moratorio";TRUE;"2017-04-19 10:57:40.314"
4;"004";"Seguros";TRUE;"Seguros";;;;"Seguros";TRUE;"2017-04-19 10:57:40.314"
5;"005";"Otros";TRUE;"Otros";;;;"Otros";TRUE;"2017-04-19 10:57:40.314"
6;"006";"Excedentes";TRUE;"Otros";;;;"Otros";TRUE;"2017-04-19 10:57:40.314"



select 
  m_cli_detalle_comprobante_creditoid integer NOT NULL,
  m_cli_concepto_creditoid integer NOT NULL,
  valor numeric(20,3) NOT NULL DEFAULT 0,
  creacion timestamp without time zone NOT NULL DEFAULT now()
  
  from m_cli_detalle_concepto
  
  
  ---
  
  select mcdcc.id,
	case when interes_causado>0 then 'update interes_causado'||interes_causado end,
	case when interes_contingente>0 then 'update interes_contingente' end,
	case when interes_anticipado>0 then 'update interes_anticipado' end,
	case when interes_corriente>0 then 'update interes_corriente' end,
	case when seguro>0 then 'update seguro' end,
	case when deuda>0 then 'update deuda' end,
	case when mora>0 then 'update mora'end
from m_cli_detalle_comprobante_credito mcdcc
inner join m_cli_credito_aprobado mcca on (mcca.id=mcdcc.m_cli_credito_aprobadoid)
inner join (select numero_colocacion,fecha_movimiento,
		SUM(case
		when POSITION( 'Int. Causado' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_causado,
		SUM(case
		when POSITION( 'Int. Contingente' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_contingente,

		SUM(case
		when POSITION( 'Int. Anticipado' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_anticipado,

		SUM(case
		when POSITION( 'Int. Corriente' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_corriente,
			
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora
		from xeo_historico 
		where cuota is not null --and xeoh.numero_colocacion='LIB-0002001'
		group by 1,2) xh on (xh.numero_colocacion=mcca.numerocredito and xh.fecha_movimiento=mcca.fecha)
		
		

--------------
------------------
------------------------
Para verificar informacion
-----------------------
---------------------
---------------
select mcca.numerocredito ,mckc.*
from m_cli_kardex_credito mckc
inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) 
where mcca.numerocredito='LIB-0001604'
order by m_cli_credito_aprobadoid

----------------------------
Consultas Carlos.
----------------------------
 SELECT  m_cli_kardex_credito.fechatransaccion,m_cli_kardex_credito.m_cli_credito_aprobadoid, maxkardexcredito.idmax, (m_cli_kardex_credito.acumuladocargocapital+  m_cli_kardex_credito.acumuladomoragenerada+ m_cli_kardex_credito.acumuladocorrientegenerado+ m_cli_kardex_credito.acumuladocuotaseguro+  m_cli_kardex_credito.acumuladootros) sumacapital, (m_cli_kardex_credito.acumuladoabonoseguro,  m_cli_kardex_credito.acumuladoabonootros, Xm_cli_kardex_credito.acumuladoabonocapital+m_cli_kardex_credito.acumuladoabonomora+m_cli_kardex_credito.acumuladoabonocorriente) 
   FROM m_cli_kardex_credito
   JOIN ( SELECT max(m_cli_kardex_credito_1.id) AS idmax
           FROM m_cli_kardex_credito m_cli_kardex_credito_1
          GROUP BY m_cli_kardex_credito_1.m_cli_credito_aprobadoid) maxkardexcredito ON maxkardexcredito.idmax = m_cli_kardex_credito.id
          where m_cli_kardex_credito.m_cli_credito_aprobadoid=534
	  
	  
 SELECT m_cli_kardex_credito.id, m_cli_kardex_credito.m_cli_detalle_comprobante_creditoid, m_cli_kardex_credito.s_tipo_documentoid, m_cli_kardex_credito.s_tipo_movimientoid, m_cli_kardex_credito.s_vigenciavigencia, m_cli_kardex_credito.s_periodoperiodo, m_cli_kardex_credito.fechatransaccion, m_cli_kardex_credito.username, m_cli_kardex_credito.creacion, m_cli_kardex_credito.m_cli_credito_aprobadoid, m_cli_kardex_credito.acumuladocargocapital, m_cli_kardex_credito.acumuladoabonocapital, m_cli_kardex_credito.acumuladomoragenerada, m_cli_kardex_credito.acumuladoabonomora, m_cli_kardex_credito.acumuladocorrientegenerado, m_cli_kardex_credito.acumuladoabonocorriente, m_cli_kardex_credito.acumuladocuotaseguro, m_cli_kardex_credito.acumuladoabonoseguro, m_cli_kardex_credito.fecharealdepago, m_cli_kardex_credito.m_tes_detalle_comprobante_egresoid, maxkardexcredito.idmax, m_cli_kardex_credito.m_cli_detalle_acta_castigoid, m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid, m_cli_kardex_credito.acumuladootros, m_cli_kardex_credito.acumuladoabonootros, m_cli_kardex_credito.valortransaccion, m_cli_kardex_credito.capitalperiodo, m_cli_kardex_credito.abonocapital, m_cli_kardex_credito.interescorrienteperiodo, m_cli_kardex_credito.abonocorriente, m_cli_kardex_credito.interesmoratorioperiodo, m_cli_kardex_credito.abonomoratorios, m_cli_kardex_credito.cuotaseguro, m_cli_kardex_credito.abonoseguro, m_cli_kardex_credito.cuotaotros, m_cli_kardex_credito.estado
   FROM m_cli_kardex_credito
   JOIN ( SELECT max(m_cli_kardex_credito_1.id) AS idmax
           FROM m_cli_kardex_credito m_cli_kardex_credito_1
          GROUP BY m_cli_kardex_credito_1.m_cli_credito_aprobadoid) maxkardexcredito ON maxkardexcredito.idmax = m_cli_kardex_credito.id
          where m_cli_kardex_credito.m_cli_credito_aprobadoid=534

