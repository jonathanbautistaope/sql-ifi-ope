//historico
update xeo_historico set numero_colocacion = trim (numero_colocacion);
update xeo_historico set transaccion=trim(transaccion);
update xeo_historico set tipo_doc=trim(tipo_doc);
update xeo_historico set tipo_doc=upper(tipo_doc);

//Plan de pagos
update xeo_plandepagos set numero_credito= trim (numero_credito);

---------------------------------------------------
----m_cli_liquidacion_cuota
---------------------------------------------------

insert into m_cli_liquidacion_cuota (s_tipo_documentoid, s_tipo_movimientoid, s_vigenciavigencia, s_periodoperiodo, estado, creacion, fecha, descripcion, consecutivo)
SELECT distinct 41, 186, '2017', 1, 'Autorizado',  to_date('2017-01-01','yyyy-mm-dd'), xh.fecha_desembolso ,ced_cliente || ' - ' ||(CASE 
WHEN s_tercero.naturalezajuridica='Natural' 
	THEN s_tercero.nombre1||' '||COALESCE(s_tercero.nombre2,' ')||' '||s_tercero.apellido1||' '||COALESCE(s_tercero.apellido2,' ')
WHEN s_tercero.naturalezajuridica='Juridica' 
	THEN s_tercero.razonsocial
END) || ' - ' || ' - Num.Credito:' || xh.numero_colocacion ,(SELECT to_char(cast(coalesce(max(consecutivo),'0') as int)+1,'FM09999999') from m_cli_liquidacion_cuota)
from xeo_historico xh
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)
WHERE xh.fecha_desembolso IS NOT NULL
--AND  XH.NUMERO_COLOCACION IN ('CAR-193','LIB-0002879','LIB-0002892','LIB-0002894','LIB-0002896','LIB-0002900')

order by xh.fecha_desembolso asc 

-------------------------------------------------------
Para modificar los consecutivo
-------------------------------------------------------
update m_cli_liquidacion_cuota mccc1 set consecutivo= (select to_char(count(mccc2.id)+1,'FM09999999') 
from m_cli_liquidacion_cuota mccc2
where mccc2.id<mccc1.id)

---------------------------------------------------
----m_cli_credito_aprobado
---------------------------------------------------

insert into m_cli_credito_aprobado (m_cli_detalle_aprobacionid,m_cli_clasificacion_creditoid,m_cli_etapa_cobroid,numerocredito,fecha,descripcion,consolidardeudas,tipoconsolidaciondeuda,estadocredito,estadoparaliquidacion,formadeextincion,plazoaprobado, costoamortizado,montoaprobado,periodogracia,formadepago,modalidadpago,numeroregistrodelcredito,fecharegistrodelcredito,diadepago,tipoamortizacion,tasainterespactada,tipotasainteres,modoliquidacioninteres,spread,m_cli_clienteid,m_cli_fuente_pagoid,creacion,valorcuota,fechafin,periodicidadintereses)
SELECT 
1,2,2, xh.numero_colocacion,xpp.fecha_desembolso,xh.numero_colocacion,false,'No Aplica','Desembolsado','Normal',
(CASE 
WHEN xh.transaccion='VIGENTE' 
	THEN 'Vigente'
WHEN xh.transaccion='CANCELADO' 
	THEN 'Pagado'
END),xpp.plazo,false,xh.valor_desembolso,0,
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Descuento nómina'
ELSE 'Efectivo' 
END),xpp.modo_pago,xh.numero_colocacion,xpp.fecha_desembolso,cast(MAX(to_char(extract(day from xpp.fecha_vencimiento),'99')) as integer),
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Cuota creciente'
ELSE 'Cuota constante' 
END),xpp.tasa_ea,'Fijo','Vencido',					CAST(xpp.puntos_spread as NUMERIC(20,4) ),
m_cli_cliente.id,2, to_date('2017-01-01','yyyy-mm-dd'),
MAX (CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN valor_cuota
ELSE 0 
END),xpp.fecha_fin_credito,(case
		when cast(pago_interes as int)=30 then 'Mensual'
		when cast(pago_interes as int)=60  then 'Bimestral'
		when cast(pago_interes as int)=90  then 'Trimestral'
		when cast(pago_interes as int)=120  then 'Cuatrimestral'
		when cast(pago_interes as int)=150  then 'Pentamestral'
		when cast(pago_interes as int)=180 then 'Semestral' 
		when cast(pago_interes as int)=210  then 'Septamestral'
		when cast(pago_interes as int)=240  then 'Octamestral'
		when cast(pago_interes as int)=270  then 'Nonamestral'
		when cast(pago_interes as int)=300 then 'Decamestral'
		when cast(pago_interes as int)=360 then 'Anual'
end)
from xeo_historico xh
--inner join xeo_plandepagos xpp on (xpp.numero_credito=xh.numero_colocacion and xpp.cuota=xh.cuota)
inner join xeo_plandepagos xpp on (xpp.numero_credito=xh.numero_colocacion and xh.cuota is null)
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)
inner join m_cli_cliente on (s_tercero.id=m_cli_cliente.s_terceroid)
--where (transaccion like '%VIGENTE%')
group by 

xh.numero_colocacion,xpp.fecha_desembolso,xh.numero_colocacion,(CASE 
WHEN xh.transaccion='VIGENTE' 
	THEN 'Vigente'
WHEN xh.transaccion='CANCELADO' 
	THEN 'Pagado'
END),xpp.plazo,xh.valor_desembolso,
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Descuento nómina'
ELSE 'Efectivo' 
END),xpp.modo_pago,xh.numero_colocacion,xh.fecha_desembolso,
(CASE 
WHEN xh.numero_colocacion like '%LIB%' THEN 'Cuota creciente'
ELSE 'Cuota constante' 
END),xpp.tasa_ea,xpp.puntos_spread,m_cli_cliente.id,
xpp.fecha_fin_credito,(case
		when cast(pago_interes as int)=30 then 'Mensual'
		when cast(pago_interes as int)=60  then 'Bimestral'
		when cast(pago_interes as int)=90  then 'Trimestral'
		when cast(pago_interes as int)=120  then 'Cuatrimestral'
		when cast(pago_interes as int)=150  then 'Pentamestral'
		when cast(pago_interes as int)=180 then 'Semestral' 
		when cast(pago_interes as int)=210  then 'Septamestral'
		when cast(pago_interes as int)=240  then 'Octamestral'
		when cast(pago_interes as int)=270  then 'Nonamestral'
		when cast(pago_interes as int)=300 then 'Decamestral'
		when cast(pago_interes as int)=360 then 'Anual'
end)

//////******************************

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =1
where position ('LIB' in NUMEROCREDITO)>0;

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =2
where SUBSTRING(NUMEROCREDITO FROM 1 FOR 4) IN ('2006','2007','2008','2009','2011','2012','2013','2014','2015','2016'); --FOMENTO

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =3
where SUBSTRING(NUMEROCREDITO FROM 1 FOR 4)='2010'; --TESORERIA

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =2
where NUMEROCREDITO IN ('2014-01-505','2014-01-506','2014-01-509','2014-01-510','2015-01-519','2015-01-521','2015-01-522',
			'2015-02-523','2015-02-525','2015-02-528-','2016-02-532','2016-02-533','2016-02-534','2016-02-535',
			'2016-02-536','2016-02-537','2016-02-538'); --FOMENTO

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =4
where position ('FAC' in NUMEROCREDITO)>0;

update m_cli_credito_aprobado
set  m_cli_detalle_aprobacionid =6
where position ('CAR' in NUMEROCREDITO)>0;



---------------------------------------------------
---m_cli_comprobante_credito
---------------------------------------------------

insert into m_cli_comprobante_credito (m_con_centro_contableid, s_tipo_documentoid, s_tipo_movimientoid, s_vigenciavigencia, s_periodoperiodo, estadocomprobantecredito, creacion, fecha, descripcion, 
fecharealdepago,consecutivo,s_terceroid) 
SELECT distinct 
1, 42, 187, '2017', '1', 'Autorizado', to_date('2017-01-01','yyyy-mm-dd'),  xh.fecha_movimiento , 'Nro.Doc: '||xh.ced_cliente ||'-'||
(CASE 
WHEN s_tercero.naturalezajuridica='Natural' 
	THEN s_tercero.nombre1||' '||COALESCE(s_tercero.nombre2,' ')||' '||s_tercero.apellido1||' '||COALESCE(s_tercero.apellido2,' ')
WHEN s_tercero.naturalezajuridica='Juridica' 
	THEN s_tercero.razonsocial
END) || ' - ' ||  ' - Num.Credito:' || xh.numero_colocacion , 
case 
when (xh.numero_colocacion like '%LIB%') then to_date(To_char(date_trunc('month',xh.fecha_movimiento)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') 
else to_date(To_char(date_trunc('month',xh.fecha_movimiento)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd')
END ,
(SELECT to_char(cast(coalesce(max(consecutivo),'0') as int)+1,'FM09999999') from m_cli_comprobante_credito),
s_tercero.ID
from (
	select numero_colocacion,ced_cliente,fecha_movimiento,numero_doc,count(*)
	from xeo_historico
	WHERE FECHA_MOVIMIENTO IS NOT NULL
	group by numero_colocacion,ced_cliente,fecha_movimiento,numero_doc
	) xh
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)

--WHERE XH.numero_colocacion in ('CAR-181')
ORDER BY xh.fecha_movimiento

---

------------------------------------------------------------------------------------------
Insertar los creditos que no tienen movimiento en historico pero que tienen desembolso.
------------------------------------------------------------------------------------------

insert into m_cli_comprobante_credito (m_con_centro_contableid, s_tipo_documentoid, s_tipo_movimientoid, s_vigenciavigencia, s_periodoperiodo, estadocomprobantecredito, creacion, fecha, descripcion, 
fecharealdepago,consecutivo,s_terceroid) 
SELECT 1, 42, 245, '2017', '1', 'Autorizado', to_date('2017-01-01','yyyy-mm-dd'),  xh.fecha_desembolso , 'Nro.Doc: '||xh.ced_cliente ||'-'||
(CASE 
WHEN s_tercero.naturalezajuridica='Natural' 
	THEN s_tercero.nombre1||' '||COALESCE(s_tercero.nombre2,' ')||' '||s_tercero.apellido1||' '||COALESCE(s_tercero.apellido2,' ')
WHEN s_tercero.naturalezajuridica='Juridica' 
	THEN s_tercero.razonsocial
END) || ' - ' ||  ' - Num.Credito:' || xh.numero_colocacion , 
case 
when (xh.numero_colocacion like '%LIB%') then to_date(To_char(date_trunc('month',xh.fecha_desembolso)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') 
else to_date(To_char(date_trunc('month',xh.fecha_desembolso)  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd')
END ,
(SELECT to_char(cast(coalesce(max(consecutivo),'0') as int)+1,'FM09999999') from m_cli_comprobante_credito),
s_tercero.ID
from (
	select numero_colocacion,ced_cliente,fecha_desembolso,numero_doc,count(*)
	from xeo_historico
	WHERE FECHA_MOVIMIENTO IS NULL
	group by numero_colocacion,ced_cliente,fecha_desembolso,numero_doc
	) xh
inner join s_tercero on (xh.ced_cliente=s_tercero.numero)
inner join (	
		select numero_colocacion,count(*)
		from xeo_historico
		group by numero_colocacion
		having count(*)=1
	)kardex_num on (xh.numero_colocacion=kardex_num.NUMERO_COLOCACION)
ORDER BY xh.fecha_desembolso


--------------------------------------------------
Para cambiar los consecutivos
------------------------------------------------------
update m_cli_comprobante_credito mccc1 set consecutivo= (select to_char(count(mccc2.id)+1,'FM09999999') 
from m_cli_comprobante_credito mccc2
where mccc2.id<mccc1.id)

select * from m_cli_comprobante_credito --Verificar consulta de informacion
order by fecharealdepago,id


//****** Montar el s_autoriza

insert into s_autoriza(
  tipoautorizacion,
  m_rec_dependenciaid,
  m_rec_cargoid,
  s_terceroid,  
  m_cli_comprobante_creditoid)

  select 
  'Elaboro' tipoautorizacion ,
  m_rec_dependencia.id  m_rec_dependencia ,
  m_rec_cargo.id m_rec_cargo,
  s_tercero.id s_tercero,  
  m_cli_comprobante_credito.id m_cli_deposito
 
from  m_cli_comprobante_credito

left join m_rec_cargo_tercero on 268 = m_rec_cargo_tercero.s_terceroid
left join s_tercero on s_tercero.id = 268
left join m_rec_dependencia_m_rec_cargo on m_rec_dependencia_m_rec_cargo.id =m_rec_cargo_tercero.m_rec_dependencia_m_rec_cargoid
left join m_rec_dependencia on m_rec_dependencia.id =m_rec_dependencia_m_rec_cargo.m_rec_dependenciaid
left join m_rec_cargo on m_rec_cargo.id = m_rec_dependencia_m_rec_cargo.m_rec_cargoid


---------------------------------------------------
----m_cli_detalle_liquidacion_cuota PARA SUBIR EL PLAN DE PAGOS
---------------------------------------------------

insert into m_cli_detalle_liquidacion_cuota (m_cli_liquidacion_cuotaid,m_cli_credito_aprobadoid,
numerocuota,inicioliquidacion,
finliquidacion,fechapago,
saldoanteriorcredito,valorcuota,
saldoanteriorcapital,capitalperiodo,saldoactualcapital,
saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,interescorrienteperiodo,saldoactualcorriente,
saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,saldoactualmoratorios,cuotaseguro,
saldoactualseguro,saldonuevocredito,creacion,saldoanteriorseguro,abonocapital,abonocorriente,abonomoratorios,
abonoseguro)
SELECT --Solo las cuotas que tienen movimiento en el historico
	mclc.id , --m_cli_liquidacion_cuotaid
	mcca.id , --m_cli_credito_aprobadoid
	cast(xpp.cuota as integer) , --numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'), 'yyyy-mm-dd') , --inicioliquidacion
	xpp.fecha_vencimiento , --finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') , --fechapago
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0) , --saldoactualcapital
	0 , --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer) , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0) , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente 
	0 , --Saldo anterior moratorio , tabla diana
	0 , --dias mora, tabla diana
	0 , --interesmoratorioperiodo
	0 ,--porcentajemora
	0 , --saldoactualmoratorios
	coalesce(valor_seguro,0) , --cuotaseguro
	0 , --saldoactualseguro
	0 , --saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 , --saldoanteriorseguro
	coalesce(xh.deuda,0) , --abonocapital
	coalesce(xh.interes_corriente,0) , --abonocorriente
	coalesce(xh.mora,0) , --abonomoratorios
	coalesce(xh.seguro,0) --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(
		select ced_cliente,numero_colocacion,cuota,--valor_desembolso,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then VALOR_TRANSACCION end)  interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then valor_transaccion end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then valor_transaccion end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then valor_transaccion end ) mora,
		sum(saldo_capital)
		from xeo_historico
		where cuota is not null
		group by 1,2,3--,4
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(COALESCE(xh.cuota,'0')AS INTEGER) = CAST(COALESCE(xpp.cuota,'0') AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
union
SELECT --Las cuotas que no tienen movimiento en el historico
	mclc.id , 	--mclc.id
	mcca.id ,	--mca.id
	cast(xpp.cuota as integer) ,	--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd') , 'yyyy-mm-dd') ,	--inicioliquidacion
	xpp.fecha_vencimiento ,		--finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd') , 'yyyy-mm-dd') ,	--fechapago
	0  ,		--saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) ,	--valorcuota
	0  ,	--saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , 	--capitalperiodo
	coalesce(xpp.valor_capital,0) , 	--saldoactualcapital
	0  ,	--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer) , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  ,	--porcentajecorriente
	coalesce(xpp.valor_interes,0) ,	--interescorrienteperiodo
	0 , 			--saldoactualcorriente
	0 ,			--saldoanteriormoratorios
	0 , 			--dias mora, tabla diana
	0 ,			--interesmoratorioperiodo
	0 ,			--porcentajemora
	0 ,			--saldoactualmoratorios
	coalesce(valor_seguro,0)     ,	--cuotaseguro
	0 ,								--saldoactualseguro
	0 , 								--saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd'),					--creacion
	0 ,							--saldoanteriorseguro
	0 ,								--abonocapital
	0 ,								--abonocorriente
	0 ,								--abonomoratorios
	0 								--abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
		select numero_colocacion,max (CAST(cuota AS INTEGER)) cuota
		from xeo_historico
		where cuota is not null
		group by numero_colocacion		
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(xpp.cuota AS INTEGER)>CAST(xh.cuota AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT  --para aquellos creditos que solo tienen una cuota a pagar
	mclc.id ,
	mcca.id ,
	cast(xpp.cuota as integer) ,
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'), 'yyyy-mm-dd') ,
	xpp.fecha_vencimiento,
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd') , 'yyyy-mm-dd') ,
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0) + coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) , --saldoactualcapital
	0 , --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer)	      , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente
	0 , --Saldo anterior moratorio , tabla diana
	0 , --diasmora
	0 , --interesmoratorioperiodo
	0 , --porcentajemora
	0 , --saldoactualmoratorios
	coalesce(valor_seguro,0) , --cuotaseguro
	0 ,  --saldoactualseguro
	0 , --saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 , -- saldoanteriorseguro
	0 , --abonocapital
	0 , --abonocorriente
	0 , --abonomoratorios
	0  --abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
	SELECT NUMERO_COLOCACION,COUNT(COALESCE(CUOTA,'0'))
		FROM XEO_HISTORICO
		--WHERE numero_colocacion not in ('LIB-0002395','LIB-0002463','LIB-0002465','LIB-0002470','LIB-0002763')
		GROUP BY NUMERO_COLOCACION
		HAVING COUNT(COALESCE(CUOTA,'0'))=1	
	) xh
		on (xh.numero_colocacion = xpp.numero_credito )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT --Solo los creditos que tienen cuota cero y que ya tienen un movimiento en historico; los que son nuevos se crean en otro select
	--adicionalmente el saldo del interes es cero por que se le descuenta total del credito.
	mclc.id , --m_cli_liquidacion_cuotaid
	mcca.id , --m_cli_credito_aprobadoid
	cast(xpp.cuota as integer) ,--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'), 'yyyy-mm-dd') , --inicioliquidacion
	xpp.fecha_vencimiento , --finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'), 'yyyy-mm-dd') , --fechapago
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) , --coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0) ||','||--saldoactualcapital
	0 , --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer) , --diasinterescorriente
	coalesce(xpp.tasa_periodo,0) , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente 
	0 , --Saldo anterior moratorio , tabla diana
	0 , --dias mora, tabla diana
	0 , --interesmoratorioperiodo
	0 , --porcentajemora
	0 , --saldoactualmoratorios
	0 , --cuotaseguro
	0 , --saldoactualseguro
	0 ,  --saldonuevocredito
	 to_date('2017-01-01','yyyy-mm-dd') , --creacion
	0 ,--saldoanteriorseguro
	0 ,--abonocapital
	0 ,--abonocorriente
	0 ,--abonomoratorios
	0  --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))

where mcca.numerocredito IN (select numero_colocacion 
				from(SELECT NUMERO_COLOCACION, SUM(VALOR_TRANSACCION) 
							FROM XEO_HISTORICO
							WHERE NUMERO_COLOCACION IN (SELECT NUMERO_CREDITO 
														FROM XEO_PLANDEPAGOS
														WHERE CUOTA='0') 
							AND CUOTA IS NOT NULL
							GROUP BY NUMERO_COLOCACION
							)a
				)
AND CAST(COALESCE(xpp.cuota,'0') AS INTEGER)=0

//LOS ANTERIORES CREDITOS TIENEN EN EL PLAN DE PAGOS UN PAGO QUE ES EL PAGO 0 EN EL CUAL SE DESCUENTA EL VALOR DE LOS INTERESES.


-------------------------------------------------------------------------
Subir los planes de pagos y el detalle 
-------------------------------------------------------------------------

insert into m_cli_plan_pagos (consecutivo,fecha,estado,descripcion,fechaanulacion,creacion)
select consecutivo,fecha,estado,descripcion,null,creacion
 from m_cli_liquidacion_cuota;
 
 insert into m_cli_detalle_plan_pagos (m_cli_plan_pagosid,m_cli_credito_aprobadoid,numerocuota,inicioliquidacion,finliquidacion,fechapago,valorcuota,saldoanteriorcredito,saldoanteriorcapital,capitalperiodo,abonocapital,saldoactualcapital,saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,
 interescorrienteperiodo,abonocorriente,saldoactualcorriente,saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,abonomoratorios,
 saldoanteriorseguro,cuotaseguro,abonoseguro,saldoactualseguro,saldoanteriorotros,cuotaotros,abonootros,saldoactualotros,saldonuevocredito,creacion)
select  mcpp.id,m_cli_credito_aprobadoid,numerocuota,inicioliquidacion,finliquidacion,fechapago,mcdlc.valorcuota,saldoanteriorcredito,saldoanteriorcapital,capitalperiodo,abonocapital,saldoactualcapital,saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,
 interescorrienteperiodo,abonocorriente,saldoactualcorriente,saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,abonomoratorios,
 saldoanteriorseguro,cuotaseguro,abonoseguro,saldoactualseguro,saldoanteriorotros,cuotaotros,abonootros,saldoactualotros,saldonuevocredito,mcdlc.creacion
from m_cli_detalle_liquidacion_cuota mcdlc
inner join m_cli_credito_aprobado mcca on (mcdlc.m_cli_credito_aprobadoid=mcca.id) 
inner join m_cli_plan_pagos mcpp on (mcca.numerocredito=substring(mcpp.descripcion from position ('Num.Credito:' in mcpp.descripcion)+12 for char_length(mcpp.descripcion)));

----------------------------------------------------------------------------------------------
Para calcular los saldos; y saber a cuales se les debe realizar un cargue en la ultima cuota
Para hallar los saldos actuales de todas las cuotas.
----------------------------------------------------------------------------------------------
update  M_CLI_DETALLE_LIQUIDACION_CUOTA set 
	saldoactualcapital=0,saldoactualcorriente=0,saldoactualseguro=0,saldoactualmoratorios=0;
	
update	m_cli_detalle_liquidacion_cuota 
set 	saldoactualcapital = coalesce(capitalperiodo,0)-coalesce(abonocapital,0) ;

update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualcorriente = coalesce(INTERESCORRIENTEPERIODO,0) -coalesce(ABONOCORRIENTE,0) ;

update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualmoratorios = coalesce(interesmoratorioperiodo,0) - coalesce(abonomoratorios,0) ;
	
update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualseguro = coalesce(cuotaseguro,0) - coalesce(ABONOSEGURO,0);
	
update 	m_cli_detalle_liquidacion_cuota 			
set 	saldonuevocredito = coalesce(saldoactualcapital,0) 	+ 
	coalesce(saldoactualcorriente,0) 			+ 
	coalesce(saldoactualmoratorios,0) 			+ 
	coalesce(saldoactualseguro,0) ;

---------- con saldos 
insert into temporal (numerocredito)
		select  distinct NUMEROCREDITO 
		 from m_cli_detalle_liquidacion_cuota MCDLC
		INNER JOIN M_CLI_CREDITO_APROBADO MCCA 
		ON (MCDLC.M_CLI_CREDITO_APROBADOID=MCCA.ID AND FORMADEEXTINCION='Vigente')
		where (saldoactualcapital<0)
		union
		select  distinct NUMEROCREDITO 
		 from m_cli_detalle_liquidacion_cuota MCDLC
		INNER JOIN M_CLI_CREDITO_APROBADO MCCA 
		ON (MCDLC.M_CLI_CREDITO_APROBADOID=MCCA.ID AND FORMADEEXTINCION='Vigente')
		where (saldoactualcorriente<0)	
		union	
		select  distinct NUMEROCREDITO 
		 from m_cli_detalle_liquidacion_cuota MCDLC
		INNER JOIN M_CLI_CREDITO_APROBADO MCCA 
		ON (MCDLC.M_CLI_CREDITO_APROBADOID=MCCA.ID AND FORMADEEXTINCION='Vigente')
		where (saldoactualseguro<0)	
		union	
		select  distinct NUMEROCREDITO 
		 from m_cli_detalle_liquidacion_cuota MCDLC
		INNER JOIN M_CLI_CREDITO_APROBADO MCCA 
		ON (MCDLC.M_CLI_CREDITO_APROBADOID=MCCA.ID AND FORMADEEXTINCION='Vigente')
		where  (ABONOMORATORIOS>0)	

-------------------------------------------------------------------------------
borrar toda la informacion de: 
delete from m_cli_detalle_liquidacion_cuota 
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
Todos los creditos se cargan el valor que pago en el valor y en el abono
----m_cli_detalle_liquidacion_cuota 
-------------------------------------------------------------------------------

insert into m_cli_detalle_liquidacion_cuota (m_cli_liquidacion_cuotaid,m_cli_credito_aprobadoid,
numerocuota,inicioliquidacion,
finliquidacion,fechapago,
saldoanteriorcredito,valorcuota,
saldoanteriorcapital,capitalperiodo,saldoactualcapital,
saldoanteriorcorrientes,diasinterescorriente,porcentajecorriente,interescorrienteperiodo,saldoactualcorriente,
saldoanteriormoratorios,diasmora,interesmoratorioperiodo,porcentajemora,saldoactualmoratorios,cuotaseguro,
saldoactualseguro,saldonuevocredito,creacion,saldoanteriorseguro,abonocapital,abonocorriente,abonomoratorios,
abonoseguro)
SELECT mclc.id,--m_cli_liquidacion_cuotaid
	mcca.id ,--m_cli_credito_aprobadoid
	cast (xpp.cuota as integer) ,--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),--inicioliquidacion
	xpp.fecha_vencimiento,--finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd'),--fechapago
	0 ,--saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0),--valorcuota
	0 ,--saldoanteriorcapital
	coalesce(xh.deuda,0),--capitalperiodo
	0,--saldoactualcapital
	0,--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer),--diasinterescorriente
	coalesce(xpp.tasa_periodo,0) ,--porcentajecorriente
	coalesce(xh.interes_corriente,0) ,--interescorrienteperiodo
	0 ,--saldoactualcorriente 
	0 ,--Saldo anterior moratorio , tabla diana
	coalesce(xh.dd_mora,0) ,--dias mora, tabla diana
	coalesce(xh.mora,0),--interesmoratorioperiodo
	0 ,--porcentajemora
	0 ,--saldoactualmoratorios
	coalesce(xh.seguro,0)  ,--cuotaseguro
	0 ,--saldoactualseguro
	0 , --saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'),--creacion
	0 ,--saldoanteriorseguro
	coalesce(xh.deuda,0) ,--abonocapital
	coalesce(xh.interes_corriente,0) ,--abonocorriente
	coalesce(xh.mora,0) ,--abonomoratorios
	coalesce(xh.seguro,0) --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(
		select ced_cliente,numero_colocacion,cuota,--valor_desembolso,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)  interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then cast(dd as integer) end ) dd_mora,
		sum(coalesce(saldo_capital,0))
		from xeo_historico
		where cuota is not null
		group by 1,2,3--,4
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(COALESCE(xh.cuota,'0')AS INTEGER) = CAST(COALESCE(xpp.cuota,'0') AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
union
SELECT --Las cuotas que no tienen movimiento en el historico
	mclc.id, 	--mclc.id
	mcca.id ,		--mca.id
	cast (xpp.cuota as integer) ,		--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),	--inicioliquidacion
	xpp.fecha_vencimiento,		--finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd'),	--fechapago
	0 ,		--saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) ,	--valorcuota
	0 ,	--saldoanteriorcapital
	coalesce(xpp.valor_capital,0) ,	--capitalperiodo
	coalesce(xpp.valor_capital,0) ,	--saldoactualcapital
	0 ,	--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer),--diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  ,	--porcentajecorriente
	coalesce(xpp.valor_interes,0) ,	--interescorrienteperiodo
	0 , 			--saldoactualcorriente
	0 ,--saldoanteriormoratorios
	0 ,--dias mora, tabla diana
	0 ,--interesmoratorioperiodo
	0 ,--porcentajemora
	0 ,--saldoactualmoratorios
	coalesce(valor_seguro,0),--cuotaseguro
	0 ,						--saldoactualseguro
	0 ,--saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'),--creacion
	0 ,								--saldoanteriorseguro
	0 ,--abonocapital
	0 ,--abonocorriente
	0 ,--abonomoratorios
	0 --abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
		select numero_colocacion,max (CAST(cuota AS INTEGER)) cuota
		from xeo_historico
		where cuota is not null
		group by numero_colocacion		
	) xh
		on (xh.numero_colocacion = xpp.numero_credito and CAST(xpp.cuota AS INTEGER)>CAST(xh.cuota AS INTEGER) )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT  --para aquellos creditos que solo tienen una cuota a pagar
	mclc.id,
	mcca.id ,
	cast(xpp.cuota as integer) ,
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),
	xpp.fecha_vencimiento,
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd'),
	0,--saldoanteriorcredito
	coalesce(xpp.valor_capital,0) + coalesce(xpp.valor_interes,0) ,--valorcuota
	0 ,--saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) , --saldoactualcapital
	0 ,--saldoanteriorcorrientes
	cast(xpp.pago_interes as integer)      ,--diasinterescorriente
	coalesce(xpp.tasa_periodo,0)  ,--porcentajecorriente
	coalesce(xpp.valor_interes,0) ,--interescorrienteperiodo
	0 ,--saldoactualcorriente
	0 ,--Saldo anterior moratorio , tabla diana
	0 ,--diasmora
	0 ,--interesmoratorioperiodo
	0 ,--porcentajemora
	0 ,--saldoactualmoratorios
	coalesce(valor_seguro,0)    ,--cuotaseguro
	0,--saldoactualseguro
	0 ,--saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 , -- saldoanteriorseguro
	0 , --abonocapital
	0 , --abonocorriente
	0 , --abonomoratorios
	0 --abonoseguro
from
	xeo_plandepagos xpp
inner join 
	(
	SELECT NUMERO_COLOCACION,COUNT(COALESCE(CUOTA,'0'))
		FROM XEO_HISTORICO
		--WHERE numero_colocacion not in ('LIB-0002395','LIB-0002463','LIB-0002465','LIB-0002470','LIB-0002763')
		GROUP BY NUMERO_COLOCACION
		HAVING COUNT(COALESCE(CUOTA,'0'))=1	
	) xh
		on (xh.numero_colocacion = xpp.numero_credito )
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
		--where upper(formadeextincion) like '%VIGENTE%'
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))
UNION
SELECT --Solo los creditos que tienen cuota cero y que ya tienen un movimiento en historico; los que son nuevos se crean en otro select
	--adicionalmente el saldo del interes es cero por que se le descuenta total del credito.
	mclc.id,--m_cli_liquidacion_cuotaid
	mcca.id ,--m_cli_credito_aprobadoid
	cast(xpp.cuota as integer) ,--numerocuota
	to_date(To_char(xpp.fecha_vencimiento  -(to_char(mcca.mesespago,'99')||'month') ::interval , 'yyyy-mm-dd'),'yyyy-mm-dd'),--inicioliquidacion
	xpp.fecha_vencimiento, --finliquidacion
	to_date(To_char(date_trunc('month',xpp.fecha_vencimiento )  +'1month' ::interval -'1sec' ::interval, 'yyyy-mm-dd'),'yyyy-mm-dd') , --fechapago
	0 , --saldoanteriorcredito
	coalesce(xpp.valor_capital,0)+coalesce(xpp.valor_interes,0) , --valorcuota
	0 , --saldoanteriorcapital
	coalesce(xpp.valor_capital,0) , --capitalperiodo
	coalesce(xpp.valor_capital,0) ,--coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0) ||','||--saldoactualcapital
	0, --saldoanteriorcorrientes
	cast(xpp.pago_interes as integer), --diasinterescorriente
	coalesce(xpp.tasa_periodo,0) , --porcentajecorriente
	coalesce(xpp.valor_interes,0) , --interescorrienteperiodo
	0 , --saldoactualcorriente 
	0 , --Saldo anterior moratorio , tabla diana
	0 , --dias mora, tabla diana
	0 , --interesmoratorioperiodo
	0 , --porcentajemora
	0 , --saldoactualmoratorios
	0 , --cuotaseguro
	0 , --saldoactualseguro
	0 , --saldonuevocredito
	to_date('2017-01-01','yyyy-mm-dd'), --creacion
	0 ,--saldoanteriorseguro
	0 ,--abonocapital
	0 ,--abonocorriente
	0 ,--abonomoratorios
	0 --abonoseguro
from 	
	xeo_plandepagos xpp
inner join 
	(select 
	substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
	from m_cli_liquidacion_cuota) mclc
		on (trim(xpp.numero_credito) = trim(mclc.credito))
inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado
	) mcca
		on (trim(mcca.numerocredito)=trim(xpp.numero_credito))

where mcca.numerocredito IN  (select numero_colocacion 
				from(SELECT NUMERO_COLOCACION, SUM(VALOR_TRANSACCION) 
							FROM XEO_HISTORICO
							WHERE NUMERO_COLOCACION IN (SELECT NUMERO_CREDITO 
														FROM XEO_PLANDEPAGOS
														WHERE CUOTA='0') 
							AND CUOTA IS NOT NULL
							GROUP BY NUMERO_COLOCACION
							)a
				)
AND CAST(COALESCE(xpp.cuota,'0') AS INTEGER)=0

//***************************************************************************************************************************
//***************************************************************************************************************************
//Para hallar los saldos actuales de todas las cuotas.
//***************************************************************************************************************************
//***************************************************************************************************************************

update  M_CLI_DETALLE_LIQUIDACION_CUOTA set 
	saldoactualcapital=0,saldoactualcorriente=0,saldoactualseguro=0,saldoactualmoratorios=0;
	
update	m_cli_detalle_liquidacion_cuota 
set 	saldoactualcapital = coalesce(capitalperiodo,0)-coalesce(abonocapital,0) ;

update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualcorriente = coalesce(INTERESCORRIENTEPERIODO,0) -coalesce(ABONOCORRIENTE,0) ;

update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualmoratorios = coalesce(interesmoratorioperiodo,0) - coalesce(abonomoratorios,0) ;
	
update 	m_cli_detalle_liquidacion_cuota 
set 	saldoactualseguro = coalesce(cuotaseguro,0) - coalesce(ABONOSEGURO,0);
	
update 	m_cli_detalle_liquidacion_cuota 			
set 	saldonuevocredito = coalesce(saldoactualcapital,0) 	+ 
	coalesce(saldoactualcorriente,0) 			+ 
	coalesce(saldoactualmoratorios,0) 			+ 
	coalesce(saldoactualseguro,0) ;

------------------------------------------------------------------------
Asignacion de saldos a los creditos que no se encuentran a paz y salvo
------------------------------------------------------------------------
select CASE WHEN SALDO_CAPITAL>0 THEN 'UPDATE m_cli_detalle_liquidacion_cuota mclc set saldoactualcapital='||saldo_capital||' from m_cli_credito_aprobado mcca where mcca.id=mclc.m_cli_credito_aprobadoid and numerocuota='||m_cuota||' and numerocredito="'||numero_credito||'";' END,
	CASE WHEN SALDO_INTERES>0 THEN 'UPDATE m_cli_detalle_liquidacion_cuota mclc set saldoactualcorriente='||saldo_interes||' from m_cli_credito_aprobado mcca where mcca.id=mclc.m_cli_credito_aprobadoid and numerocuota='||m_cuota||' and numerocredito="'||numero_credito||'";' END,
	CASE WHEN SALDO_SEGURO>0 THEN 'UPDATE m_cli_detalle_liquidacion_cuota mclc set saldoactualseguro='||saldo_seguro||' from m_cli_credito_aprobado mcca where mcca.id=mclc.m_cli_credito_aprobadoid and numerocuota='||m_cuota||' and numerocredito="'||numero_credito||'";' END
from 
(
	select 
	xpp.numero_credito,
	
	--xpp.cuota,
	sum(coalesce(xpp.valor_capital,0)) as deuda_pp,sum(coalesce(xh.deuda,0)) as deuda_h,
	sum(coalesce(xpp.valor_capital,0)-coalesce(xh.deuda,0)) as saldo_capital,
	
	sum(coalesce(xpp.valor_interes,0)) as int_pp,sum(coalesce(xh.interes_corriente,0)) as int_h,
	sum(coalesce(xpp.valor_interes,0)-coalesce(xh.interes_corriente,0)) as saldo_interes,
	
	sum(coalesce(xpp.valor_seguro,0)) as seg_pp,sum(coalesce(xh.seguro,0)) as seg_h, 
	sum(coalesce(xpp.valor_seguro,0)-coalesce(xh.seguro,0)) as saldo_seguro,

	sum(mora) as mora_h, 

	(select max(cuota) from xeo_historico xh where numero_colocacion=xpp.numero_credito) as m_cuota,

	(select max(fecha_movimiento) from xeo_historico xh where numero_colocacion=xpp.numero_credito) as fec_mov
	from 	
	xeo_plandepagos xpp
	inner join 
	(
		select ced_cliente,xh1.numero_colocacion,cuota,--valor_desembolso,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)  interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then cast(dd as integer) end ) dd_mora,
		sum(coalesce(saldo_capital,0))
		from xeo_historico xh1
		inner join (select numero_colocacion from xeo_historico where cuota is null and transaccion='VIGENTE') xh2
		ON (xh1.numero_colocacion=xh2.numero_colocacion)
		where cuota is not null
		group by 1,2,3--,4
		) xh
		on (xh.numero_colocacion = xpp.numero_credito and 
			CAST(COALESCE(xh.cuota,'0')AS INTEGER) = CAST(COALESCE(xpp.cuota,'0') AS INTEGER) )
		where xh.numero_colocacion in 
		(select numerocredito from temporal)
		group by 1
		oRDER BY 1
) xsaldo;




-------------------------------------------------------------------------
Tomar los updates quitar las comillas dobles y ejecutarlos.
-------------------------------------------------------------------------

-------------------------------------------------------------------------
Se actualiza la informacion de los saldos, debido al cambio en la informacion de los saldos
-------------------------------------------------------------------------

update 	m_cli_detalle_liquidacion_cuota 			
set 	saldonuevocredito = coalesce(saldoactualcapital,0) 	+ 
	coalesce(saldoactualcorriente,0) 			+ 
	coalesce(saldoactualmoratorios,0) 			+ 
	coalesce(saldoactualseguro,0) ;

---------------------------------------------------------------------------------------------------------------------------------
Se agrega un dia a la fecha inicioliquidacion debido a que se estaban duplicando la fecha final y la fecha inicial en las cuotas.
---------------------------------------------------------------------------------------------------------------------------------

select mcdlc1.m_cli_credito_aprobadoid,numerocuota,inicioliquidacion+1
 from m_cli_detalle_liquidacion_cuota mcdlc1 
 inner join (select m_cli_credito_aprobadoid,min(id)min_id from m_cli_detalle_liquidacion_cuota
group by m_cli_credito_aprobadoid) mcdlc on (mcdlc.m_cli_credito_aprobadoid=mcdlc1.m_cli_credito_aprobadoid and mcdlc1.id>mcdlc.min_id)

update m_cli_detalle_liquidacion_cuota mcdlc1
set inicioliquidacion =inicioliquidacion+1
from 
 (select m_cli_credito_aprobadoid,min(id)min_id from m_cli_detalle_liquidacion_cuota
group by m_cli_credito_aprobadoid) mcdlc where (mcdlc.m_cli_credito_aprobadoid=mcdlc1.m_cli_credito_aprobadoid and mcdlc1.id>mcdlc.min_id)

------------------------------------------------------------------------------------------------------------------------------
Creditos que afectan la ultima cuota solo en interes pero que no tocan el capital, se les debe actualizar esa informacion
------------------------------------------------------------------------------------------------------------------------------
select 'update m_cli_detalle_liquidacion_cuota mcdlc set capitalperiodo='||valor_capital||',saldoactualcapital='||valor_capital||' from m_cli_credito_aprobado mcca where (mcca.id=mcdlc.m_cli_credito_aprobadoid and numerocredito='''||xpp.numero_credito||''' and numerocuota='||cuota||');'
from xeo_plandepagos xpp
inner join 
(select numerocredito,numerocuota
from m_cli_detalle_liquidacion_cuota mcdlc
inner join m_cli_credito_aprobado mcca on (mcca.id=mcdlc.m_cli_credito_aprobadoid)
where  capitalperiodo=0 and formadeextincion='Vigente' and numerocuota<>0) ccn
	on (xpp.numero_credito=ccn.numerocredito
		and cast(xpp.cuota as integer)=ccn.numerocuota 
		and xpp.numero_credito not in ('2014-02-511*','2014-02-513','2015-01-524','2017-02-540')); --Estos creditos tienen periodos de gracia.
		

-------------------------------------------------------------------------
----m_cli_detalle_comprobante_credito	con detalle liquidacion cuota 					
-------------------------------------------------------------------------

insert into m_cli_detalle_comprobante_credito 
(m_cli_comprobante_creditoid,m_cli_credito_aprobadoid,creacion,m_cli_detalle_liquidacion_cuotaid,descripcion,valor)
select 
mccc.id,mcca.id, to_date('2017-01-01','yyyy-mm-dd'),mcdlc.id,mccc.descripcion,xh.valor
from
(select numero_colocacion,fecha_movimiento,cuota,sum(coalesce(valor_transaccion,0)) valor
from xeo_historico
where cuota is not null
group by 1,2,3) xh

inner join 
	(select id,numerocredito
		from m_cli_credito_aprobado
	) mcca
		on (trim(mcca.numerocredito)=trim(xh.numero_colocacion) )

inner join 
	m_cli_detalle_liquidacion_cuota mcdlc
		on (mcdlc.m_cli_credito_aprobadoid=mcca.id) and (cast(xh.cuota as integer)=mcdlc.numerocuota)
					
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_movimiento))

------------------------------------------------------------------------------------------------
----m_cli_kardex_credito 
------------------------------------------------------------------------------------------------
	select 
	--xpp2.numero_credito,xh.numero_colocacion,xpp2.cuota,
	'insert into m_cli_kardex_credito 
	(m_cli_detalle_comprobante_creditoid,
	s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,
	fechatransaccion, 
	username,
	creacion,
	m_cli_credito_aprobadoid,
	acumuladocargocapital,
	acumuladoabonocapital,
	acumuladomoragenerada,
	acumuladoabonomora,
	acumuladocorrientegenerado,
	acumuladoabonocorriente,
	acumuladocuotaseguro,
	acumuladoabonoseguro,
	fecharealdepago,
	m_cli_detalle_liquidacion_cuotaid,
	valortransaccion,
	capitalperiodo,
	abonocapital,
	interescorrienteperiodo,
	abonocorriente,
	interesmoratorioperiodo,
	abonomoratorios,
	cuotaseguro,
	abonoseguro,
	estado) values ('||
	mcdcc.id||--m_cli_detalle_comprobante_creditoid
	',42,187,2017,1,"'||--s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,	
	xh.fecha_movimiento||'","'||--fecha_transaccion
	'admin@siep.com'||'","'||--username
	'01-01-2017'||'",'||--creacion
	mcca.id||','||
	xh.valor_desembolso  ||','|| --coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) ||','||--acumulado cargo capital
	coalesce(xh.deuda,0)||','||--acumulado abono capital
	coalesce(xh.mora,0)||','||--xmora.valor_mora;tabla diana mora acumuladomoragenerada
	COALESCE(xh.mora,0)||','||--xmora.mora; acumuladoabonomora
	coalesce(xh.interes_corriente,0)||','||--acumulado corriente gene
	coalesce(xh.interes_corriente,0)||','||--acumulado abono corriente
	coalesce(xh.seguro,0)||','||--acumulado cuota seguro
	coalesce(xh.seguro,0)||',"'||--acumulado abono seguro
	xh.fecha_movimiento||'",'||--fecha_real_de pago
	mcdlc.id||','||--m_cli_detalle_liquidacion_cuotaid
	coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0)||','||--valor_transaccion
	coalesce(xh.deuda,0)||','||--capitalperiodo
	coalesce(xh.deuda,0)||','||--abono capital
	coalesce(xh.interes_corriente,0)||','||--interes corriente periodo
	coalesce(xh.interes_corriente,0)||','||--abono corriente
	coalesce(xh.mora,0)||','|| --interes moratorio periodo
	COALESCE(xh.mora,0)||','||--xmora.mora;abono moratorios
	coalesce(xh.Seguro,0)||','|| --cuota seguro
	coalesce(xh.Seguro,0)||',"'|| --abono seguro
	'Autorizado'||'");'--estado	
from 
	(select xeoh.numero_colocacion,cuota,
		coalesce(xeoh2.valor_desembolso,0) valor_desembolso,
		fecha_movimiento,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(saldo_capital) capital
		from xeo_historico xeoh
		inner join (select numero_colocacion,valor_desembolso
		 from xeo_historico
		 where cuota is null)xeoh2
		on ( xeoh2.numero_colocacion=xeoh.numero_colocacion )
		where cuota is not null --and xeoh.numero_colocacion='LIB-0002001'
		group by 1,2,3,4		
	) xh
		
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_movimiento))

inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado mcca
	) mcca
	on (trim(mcca.numerocredito)=trim(xh.numero_colocacion))	

inner join 
	(select 
		substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
		from m_cli_liquidacion_cuota) mclc
			on (trim(xh.numero_colocacion) = trim(mclc.credito))

inner join 
	m_cli_detalle_liquidacion_cuota mcdlc 
		on (mcdlc.m_cli_credito_aprobadoid=mcca.id) and (cast(xh.cuota as integer)=mcdlc.numerocuota)
		

inner join 
	m_cli_detalle_comprobante_credito mcdcc
		on (mcdcc.m_cli_comprobante_creditoid = mccc.id
			 and mcdcc.m_cli_credito_aprobadoid=mcca.id
			 and mcdcc.m_cli_detalle_liquidacion_cuotaid=mcdlc.id)


----Insert select 

insert into m_cli_kardex_credito 
	(m_cli_detalle_comprobante_creditoid,
	s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,
	fechatransaccion, 
	username,
	creacion,
	m_cli_credito_aprobadoid,
	acumuladocargocapital,
	acumuladoabonocapital,
	acumuladomoragenerada,
	acumuladoabonomora,
	acumuladocorrientegenerado,
	acumuladoabonocorriente,
	acumuladocuotaseguro,
	acumuladoabonoseguro,
	fecharealdepago,
	m_cli_detalle_liquidacion_cuotaid,
	valortransaccion,
	capitalperiodo,
	abonocapital,
	interescorrienteperiodo,
	abonocorriente,
	interesmoratorioperiodo,
	abonomoratorios,
	cuotaseguro,
	abonoseguro,
	estado)
select 
	
	mcdcc.id,--m_cli_detalle_comprobante_creditoid
	42,187,2017,1,--s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,	
	xh.fecha_movimiento , --fecha_transaccion
	'admin@siep.com' , --username
	 to_date('2017-01-01','yyyy-mm-dd'), --creacion
	mcca.id,
	xh.valor_desembolso  ,--coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) ||','||--acumulado cargo capital
	coalesce(xh.deuda,0) , --acumulado abono capital
	coalesce(xh.mora,0) , --xmora.valor_mora;tabla diana mora acumuladomoragenerada
	COALESCE(xh.mora,0) , --xmora.mora; acumuladoabonomora
	coalesce(xh.interes_corriente,0) , --acumulado corriente gene
	coalesce(xh.interes_corriente,0) , --acumulado abono corriente
	coalesce(xh.seguro,0) , --acumulado cuota seguro
	coalesce(xh.seguro,0) , --acumulado abono seguro
	xh.fecha_movimiento , --fecha_real_de pago
	mcdlc.id , --m_cli_detalle_liquidacion_cuotaid
	coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) , --valor_transaccion
	coalesce(xh.deuda,0) , --capitalperiodo
	coalesce(xh.deuda,0) , --abono capital
	coalesce(xh.interes_corriente,0) , --interes corriente periodo
	coalesce(xh.interes_corriente,0) , --abono corriente
	coalesce(xh.mora,0) ,  --interes moratorio periodo
	COALESCE(xh.mora,0) , --xmora.mora;abono moratorios
	coalesce(xh.Seguro,0) ,  --cuota seguro
	coalesce(xh.Seguro,0) ,  --abono seguro
	'Autorizado' --estado	
from 
	(select xeoh.numero_colocacion,cuota,
		coalesce(xeoh2.valor_desembolso,0) valor_desembolso,
		fecha_movimiento,
		SUM(case
		when POSITION( 'Int.' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_corriente,
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora,
		sum(saldo_capital) capital
		from xeo_historico xeoh
		inner join (select numero_colocacion,valor_desembolso
		 from xeo_historico
		 where cuota is null)xeoh2
		on ( xeoh2.numero_colocacion=xeoh.numero_colocacion )
		where cuota is not null --and xeoh.numero_colocacion='LIB-0002001'
		group by 1,2,3,4		
	) xh
		
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_movimiento))

inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado mcca
	) mcca
	on (trim(mcca.numerocredito)=trim(xh.numero_colocacion))	

inner join 
	(select 
		substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id
		from m_cli_liquidacion_cuota) mclc
			on (trim(xh.numero_colocacion) = trim(mclc.credito))

inner join 
	m_cli_detalle_liquidacion_cuota mcdlc 
		on (mcdlc.m_cli_credito_aprobadoid=mcca.id) and (cast(xh.cuota as integer)=mcdlc.numerocuota)
		

inner join 
	m_cli_detalle_comprobante_credito mcdcc
		on (mcdcc.m_cli_comprobante_creditoid = mccc.id
			 and mcdcc.m_cli_credito_aprobadoid=mcca.id
			 and mcdcc.m_cli_detalle_liquidacion_cuotaid=mcdlc.id)
order by xh.fecha_movimiento,m_cli_detalle_liquidacion_cuotaid


-------------------------------------------------------------------------------------------------
Insertar el detalle de los creditos que no tienen movimiento en historico
------------------------------------------------------------------------------------------------
insert into m_cli_detalle_comprobante_credito 
(m_cli_comprobante_creditoid,m_cli_credito_aprobadoid,creacion,m_cli_detalle_liquidacion_cuotaid,descripcion,valor)
select 
mccc.id,mcca.id, to_date('2017-01-01','yyyy-mm-dd'),NULL,mccc.descripcion,xh.valor
from
(select numero_colocacion,fecha_desembolso,valor_desembolso valor
from xeo_historico
where cuota is null
group by 1,2,3) xh

inner join 
	(
	select id,numerocredito 
	from m_cli_credito_aprobado
	where numerocredito
	not in (select distinct mcca1.numerocredito
		from m_cli_kardex_credito mckc
		inner join m_cli_credito_aprobado mcca1 on (mckc.m_cli_credito_aprobadoid=mcca1.id) )
	)mcca on (trim(mcca.numerocredito)=trim(xh.numero_colocacion) )
					
inner join 
	(select 
	descripcion,substring(descripcion from position ('Num.Credito:' in descripcion)+12 for char_length(descripcion)) as credito,id,
	fecha
	from m_cli_comprobante_credito) mccc
		on (trim(xh.numero_colocacion) = trim(mccc.credito) and (mccc.fecha=xh.fecha_desembolso))


--------------------------------------------------
// para adicionar los creditos que no tienen ningún movimiento
--------------------------------------------------
select numerocredito --si esta consulta se modifica debe modificarse en el insert select que sigue,donde dice:(select sin mov.)
from m_cli_credito_aprobado
where numerocredito
not in (select distinct mcca.numerocredito
from m_cli_kardex_credito mckc
inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) )
--where mcca.numerocredito='LIB-0001604'
--order by m_cli_credito_aprobadoid

-----------------------------------
Insert para m_cli_kardex_credito creditos que no tienen movimientos 
-----------------------------------
insert into m_cli_kardex_credito 
	(m_cli_detalle_comprobante_creditoid,
	s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,
	fechatransaccion, 
	username,
	creacion,
	m_cli_credito_aprobadoid,
	acumuladocargocapital,
	acumuladoabonocapital,
	acumuladomoragenerada,
	acumuladoabonomora,
	acumuladocorrientegenerado,
	acumuladoabonocorriente,
	acumuladocuotaseguro,
	acumuladoabonoseguro,
	fecharealdepago,
	m_cli_detalle_liquidacion_cuotaid,
	valortransaccion,
	capitalperiodo,
	abonocapital,
	interescorrienteperiodo,
	abonocorriente,
	interesmoratorioperiodo,
	abonomoratorios,
	cuotaseguro,
	abonoseguro,
	estado)
select 
	null,--m_cli_detalle_comprobante_creditoid
	42,187,2017,1, --s_tipo_documentoid,s_tipo_movimientoid,s_vigenciavigencia,s_periodoperiodo,	
	xh.fecha_desembolso , --fecha_transaccion
	'admin@siep.com' , --username
	'01-01-2017' , --creacion
	mcca.id , 
	xh.valor_desembolso , --coalesce(xh.interes_corriente,0)+coalesce(xh.seguro,0)+coalesce(xh.deuda,0)+coalesce(xh.mora,0) ||','||--acumulado cargo capital
	0 , --acumulado abono capital
	0 , --xmora.valor_mora;tabla diana mora acumuladomoragenerada
	0 , --xmora.mora; acumuladoabonomora
	0 , --acumulado corriente gene
	0 , --acumulado abono corriente
	0 , --acumulado cuota seguro
	0 , --acumulado abono seguro
	xh.fecha_desembolso , --fecha_real_de pago
	null , --m_cli_detalle_liquidacion_cuotaid
	0 , --valor_transaccion
	0 , --capitalperiodo
	0 , --abono capital
	0 , --interes corriente periodo
	0 , --abono corriente
	0 ,  --interes moratorio periodo
	0 , --xmora.mora;abono moratorios
	0 ,  --cuota seguro
	0 ,  --abono seguro
	'Autorizado' --estado	
from (select numero_colocacion,valor_desembolso,fecha_desembolso
		 from xeo_historico
		 where cuota is null and numero_colocacion
		 in (select numerocredito --(select sin mov.)
			from m_cli_credito_aprobado
			where numerocredito
			not in (select distinct mcca.numerocredito
			from m_cli_kardex_credito mckc
			inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) )
			--where mcca.numerocredito='LIB-0001604'
			--order by m_cli_credito_aprobadoid	
			)	
	) xh

inner join 
	(select id,numerocredito,
		(case
		when modalidadpago='Mensual' then 1
		when modalidadpago='Bimestral' then 2
		when modalidadpago='Trimestral' then  3
		when modalidadpago='Cuatrimestral' then  4
		when modalidadpago='Pentamestral' then  5
		when modalidadpago='Semestral' then 6
		when modalidadpago='Septamestral' then 7
		when modalidadpago='Octamestral' then 8
		when modalidadpago='Nonamestral' then 9
		when modalidadpago='Decamestral' then 10
		when modalidadpago='Anual' then  12
		end) mesespago
		from m_cli_credito_aprobado mcca
		where (  numerocredito in 
			(select numerocredito --(select sin mov.)
				from m_cli_credito_aprobado
				where numerocredito
				not in (select distinct mcca.numerocredito
				from m_cli_kardex_credito mckc
				inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) )
				--where mcca.numerocredito='LIB-0001604'
				--order by m_cli_credito_aprobadoid
			)
		      )
		
	) mcca
	on (trim(mcca.numerocredito)=trim(xh.numero_colocacion))	


---------------------------------------------------	
///Consultar para verificar los updates que siguen.
---------------------------------------------------	

select * from m_cli_kardex_credito
order by m_cli_credito_aprobadoid

			 

---------------------------------------------------
---- m_cli_kardex_credito 2.
--------------------------------------------------- 
update 
	m_cli_kardex_credito
set
	acumuladoabonocapital = 	
					coalesce((select 
						sum(k1.acumuladoabonocapital) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)

----------

---udpate m_cli_kardex_credito set acumuladocargocapital=acumuladoabonocapital;

---------------------------------------------------
---- m_cli_kardex_credito 4.
---------------------------------------------------
update 
	m_cli_kardex_credito
set
	acumuladoabonocorriente = 	
					coalesce((select 
						sum(k1.acumuladoabonocorriente) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION ),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)

-------------


update m_cli_kardex_credito set acumuladocorrientegenerado=acumuladoabonocorriente;

---------------------------------------------------
---- m_cli_kardex_credito 6.
---------------------------------------------------
update 
	m_cli_kardex_credito
set
	acumuladoabonoseguro = 	
					coalesce((select 
						sum(k1.acumuladoabonoseguro) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)


-----------


	update m_cli_kardex_credito set acumuladocuotaseguro=acumuladoabonoseguro;


---------------------------------------------------
---- m_cli_kardex_credito 8.
---------------------------------------------------
update 
	m_cli_kardex_credito
set
	acumuladoabonomora = 	
					coalesce((select 
						sum(k1.acumuladoabonomora) 
					from 
						m_cli_kardex_credito k1
					inner join m_cli_detalle_liquidacion_cuota dlc1 
							on ( k1.m_cli_detalle_liquidacion_cuotaid=dlc1.id)
					where 
						k1.m_cli_credito_aprobadoid = m_cli_kardex_credito.m_cli_credito_aprobadoid
					and 
						dlc1.numerocuota<=dlc2.numerocuota
					and 
						k1.FECHATRANSACCION<=m_cli_kardex_credito.FECHATRANSACCION ),0)
						
from m_cli_detalle_liquidacion_cuota dlc2
where ( m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid=dlc2.id)

--------

update m_cli_kardex_credito set acumuladomoragenerada=acumuladoabonomora;


----------------------------------------------------
Procesos para cuadre de saldos
---------------------------------------------------

1.subir los creditos que tienen saldo en cuotas de capital en la ultima cuota y que no tienen saldo a favor en intereses ni en seguro.

2. Subir los creditos que tienen saldo en cuotas de capital  en la ultima cuota y qut tienen saldo a favor menor al valor de la cuota a pagar.

3. Distribuir los saldos a favor de los intereses entre las cuotas pendientes por pagar, hasta que quede en deuda con la entidad.

---------------------------------------------------
--- m_cli_kardex_cuota						
---------------------------------------------------
insert into m_cli_kardex_cuota (m_cli_kardex_creditoid,m_cli_detalle_liquidacion_cuotaid,abonomoratorios,abonocorriente,abonocapital,abonoseguro,creacion)SELECT 
	mckc.id,
	mckc.m_cli_detalle_liquidacion_cuotaid,
	coalesce(abonomoratorios,0),--coalesce(xh.mora,0)
	coalesce(abonocorriente,0),
	coalesce(abonocapital,0),
	coalesce(abonoseguro,0),
	'01-01-2017'

from   	m_cli_kardex_credito mckc
where m_cli_detalle_liquidacion_cuotaid is not null

-------------------------------------------------------
Tablas conceptos
-------------------------------------------------------
- Tabla - m_cli_concepto_credito

1;"001";"Capital";t;"Capital"
2;"002";"Interes corriente";t;"Interes corriente"
3;"003";"Interes moratorio";t;"Interes moratorio"
4;"004";"Seguros";t;"Seguros"
5;"005";"Otros";t;"Otros"
6;"006";"Excedentes";t;"Otros"
7;"007";"Interes contingente";t;"Interes corriente"
8;"008";"Interes causado";t;"Interes corriente"
9;"009";"Interes anticipado";t;"Interes corriente"

- Tabla - m_cli_detalle_concepto
-- Columnas --
  m_cli_detalle_comprobante_creditoid integer NOT NULL,
  m_cli_concepto_creditoid integer NOT NULL,
  valor numeric(20,3) NOT NULL DEFAULT 0,
  creacion timestamp without time zone NOT NULL DEFAULT now()
  
  
  ---
  
 select mcdcc.id,xh.numero_colocacion,
	case when interes_causado>0 then 
	'insert into m_cli_detalle_concepto (m_cli_detalle_comprobante_creditoid,m_cli_concepto_creditoid,valor,creacion) values ('||mcdcc.id||',8,'||interes_causado||',"2017-01-01");' end,
	case when interes_contingente>0 then 'insert into m_cli_detalle_concepto (m_cli_detalle_comprobante_creditoid,m_cli_concepto_creditoid,valor,creacion) values ('||mcdcc.id||',7,'||interes_contingente||',"2017-01-01");' end,
	case when interes_anticipado>0 then 'insert into m_cli_detalle_concepto (m_cli_detalle_comprobante_creditoid,m_cli_concepto_creditoid,valor,creacion) values ('||mcdcc.id||',9,'||interes_anticipado||',"2017-01-01");' end,
	case when interes_corriente>0 then 'insert into m_cli_detalle_concepto (m_cli_detalle_comprobante_creditoid,m_cli_concepto_creditoid,valor,creacion) values ('||mcdcc.id||',2,'||interes_corriente||',"2017-01-01");' end,
	case when seguro>0 then 'insert into m_cli_detalle_concepto (m_cli_detalle_comprobante_creditoid,m_cli_concepto_creditoid,valor,creacion) values ('||mcdcc.id||',4,'||seguro||',"2017-01-01");' end,
	case when deuda>0 then 'insert into m_cli_detalle_concepto (m_cli_detalle_comprobante_creditoid,m_cli_concepto_creditoid,valor,creacion) values ('||mcdcc.id||',1,'||deuda||',"2017-01-01");' end,
	case when mora>0 then 'insert into m_cli_detalle_concepto (m_cli_detalle_comprobante_creditoid,m_cli_concepto_creditoid,valor,creacion) values ('||mcdcc.id||',3,'||mora||',"2017-01-01");'end
from 
(select mcdcc1.id,fecha , trim(substring(mccc.descripcion from position ('Num.Credito:' in mccc.descripcion)+12 for char_length(mccc.descripcion))) numerocredito
from m_cli_detalle_comprobante_credito mcdcc1
inner join m_cli_comprobante_credito mccc on (mccc.id=mcdcc1.m_cli_comprobante_creditoid)) mcdcc
inner join (select numero_colocacion,fecha_movimiento,
		SUM(case
		when POSITION( 'Int. Causado' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_causado,
		SUM(case
		when POSITION( 'Int. Contingente' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_contingente,

		SUM(case
		when POSITION( 'Int. Anticipado' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_anticipado,

		SUM(case
		when POSITION( 'Int. Corriente' IN transaccion)>0
			then coalesce(VALOR_TRANSACCION,0) end)interes_corriente,
			
		sum(case
		when POSITION( 'Seguro' IN transaccion)>0 
			then coalesce(valor_transaccion,0) end ) seguro,
		sum(case
		when POSITION( 'Deuda' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) deuda,
		sum(case
		when POSITION( 'Mora' IN transaccion)>0  
			then coalesce(valor_transaccion,0) end ) mora
		from xeo_historico 
		where cuota is not null --and xeoh.numero_colocacion='LIB-0002001'
		group by 1,2) xh on (xh.numero_colocacion=mcdcc.numerocredito and xh.fecha_movimiento=mcdcc.fecha)
		
		
--------------
------------------
------------------------
Para verificar informacion
-----------------------
---------------------
---------------
select mcca.numerocredito ,mckc.*
from m_cli_kardex_credito mckc
inner join m_cli_credito_aprobado mcca on (mckc.m_cli_credito_aprobadoid=mcca.id) 
where mcca.numerocredito='LIB-0001604'
order by m_cli_credito_aprobadoid

----------------------------
Consultas Carlos.
----------------------------
 SELECT  m_cli_kardex_credito.fechatransaccion,m_cli_kardex_credito.m_cli_credito_aprobadoid, maxkardexcredito.idmax, (m_cli_kardex_credito.acumuladocargocapital+  m_cli_kardex_credito.acumuladomoragenerada+ m_cli_kardex_credito.acumuladocorrientegenerado+ m_cli_kardex_credito.acumuladocuotaseguro+  m_cli_kardex_credito.acumuladootros) sumacapital, (m_cli_kardex_credito.acumuladoabonoseguro,  m_cli_kardex_credito.acumuladoabonootros, Xm_cli_kardex_credito.acumuladoabonocapital+m_cli_kardex_credito.acumuladoabonomora+m_cli_kardex_credito.acumuladoabonocorriente) 
   FROM m_cli_kardex_credito
   JOIN ( SELECT max(m_cli_kardex_credito_1.id) AS idmax
           FROM m_cli_kardex_credito m_cli_kardex_credito_1
          GROUP BY m_cli_kardex_credito_1.m_cli_credito_aprobadoid) maxkardexcredito ON maxkardexcredito.idmax = m_cli_kardex_credito.id
          where m_cli_kardex_credito.m_cli_credito_aprobadoid=534
	  
	  
 SELECT m_cli_kardex_credito.id, m_cli_kardex_credito.m_cli_detalle_comprobante_creditoid, m_cli_kardex_credito.s_tipo_documentoid, m_cli_kardex_credito.s_tipo_movimientoid, m_cli_kardex_credito.s_vigenciavigencia, m_cli_kardex_credito.s_periodoperiodo, m_cli_kardex_credito.fechatransaccion, m_cli_kardex_credito.username, m_cli_kardex_credito.creacion, m_cli_kardex_credito.m_cli_credito_aprobadoid, m_cli_kardex_credito.acumuladocargocapital, m_cli_kardex_credito.acumuladoabonocapital, m_cli_kardex_credito.acumuladomoragenerada, m_cli_kardex_credito.acumuladoabonomora, m_cli_kardex_credito.acumuladocorrientegenerado, m_cli_kardex_credito.acumuladoabonocorriente, m_cli_kardex_credito.acumuladocuotaseguro, m_cli_kardex_credito.acumuladoabonoseguro, m_cli_kardex_credito.fecharealdepago, m_cli_kardex_credito.m_tes_detalle_comprobante_egresoid, maxkardexcredito.idmax, m_cli_kardex_credito.m_cli_detalle_acta_castigoid, m_cli_kardex_credito.m_cli_detalle_liquidacion_cuotaid, m_cli_kardex_credito.acumuladootros, m_cli_kardex_credito.acumuladoabonootros, m_cli_kardex_credito.valortransaccion, m_cli_kardex_credito.capitalperiodo, m_cli_kardex_credito.abonocapital, m_cli_kardex_credito.interescorrienteperiodo, m_cli_kardex_credito.abonocorriente, m_cli_kardex_credito.interesmoratorioperiodo, m_cli_kardex_credito.abonomoratorios, m_cli_kardex_credito.cuotaseguro, m_cli_kardex_credito.abonoseguro, m_cli_kardex_credito.cuotaotros, m_cli_kardex_credito.estado
   FROM m_cli_kardex_credito
   JOIN ( SELECT max(m_cli_kardex_credito_1.id) AS idmax
           FROM m_cli_kardex_credito m_cli_kardex_credito_1
          GROUP BY m_cli_kardex_credito_1.m_cli_credito_aprobadoid) maxkardexcredito ON maxkardexcredito.idmax = m_cli_kardex_credito.id
          where m_cli_kardex_credito.m_cli_credito_aprobadoid=534
	  
	  
--------------------------------------------------
Importar informacion desde un txt o csv a postgres
--------------------------------------------------
copy m_cli_kardex_credito from
'X:\sexta migracion\m_cli_kardex_credito.csv' using delimiters ';' with csv ;


